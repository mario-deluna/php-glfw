#!/usr/bin/env php
<?php

/**
 * Load dependencies
 */
require __DIR__ . '/bootstrap.php';

/**
 * Parse the GL Spec
 */
$spec = new GLSpec;
$reader = new GLSpecReader;
$gen = new ExtGenerator;


// parse the GL spec
$reader->parse($spec, __DIR__ . '/data/gl.xml', __DIR__ . '/data/glrefs.json');

// import the gl spec into the generator
$gen->import($spec, 'gl', '4.1', [
    'glShaderSource', // custom implementation
    'glBufferData', // custom implementation
    'glGetSynciv', // currently not supported
    // 'glWaitSync', // currently not supported
    // 'glDeleteSync', // currently not supported
    'glFenceSync', // currently not supported
    // 'glClientWaitSync', // currently not supported
]);

// parse the glfw header
$glfwparser = new GLFWHeaderParser;
$glfwparser->process(GEN_PATH_EXT . '/vendor/glfw/include/GLFW/glfw3.h', $gen);

// VectorGraphics import 
$nanovg = new NVGParser();
$nanovg->process(GEN_PATH_EXT . '/vendor/nanovg/src/nanovg.h', $gen);

// generate buffer classes for gl data types
// 'GLbyte' => 'BYTE',
// 'GLubyte' => 'UNSIGNED_BYTE',
// 'GLshort' => 'SHORT',
// 'GLushort' => 'UNSIGNED_SHORT',
// 'GLint' => 'INT',
// 'GLuint' => 'UNSIGNED_INT',
// 'GLfloat' => 'FLOAT',
// 'GLhalf' => 'HALF_FLOAT',
// 'GLdouble' => 'DOUBLE',
$gen->phpglfwBuffers[] = new PHPGLFWBuffer('FloatBuffer', 'GLfloat', ExtType::T_DOUBLE);
$gen->phpglfwBuffers[] = new PHPGLFWBuffer('HFloatBuffer', 'GLhalf', ExtType::T_LONG); // we currenly have no way to handle 16bit floats, so we consider them like the "GLhalf" as a unsigned short
$gen->phpglfwBuffers[] = new PHPGLFWBuffer('DoubleBuffer', 'GLdouble', ExtType::T_DOUBLE);
$gen->phpglfwBuffers[] = new PHPGLFWBuffer('IntBuffer', 'GLint', ExtType::T_LONG);
$gen->phpglfwBuffers[] = new PHPGLFWBuffer('UIntBuffer', 'GLuint', ExtType::T_LONG);
$gen->phpglfwBuffers[] = new PHPGLFWBuffer('ShortBuffer', 'GLshort', ExtType::T_LONG);
$gen->phpglfwBuffers[] = new PHPGLFWBuffer('UShortBuffer', 'GLushort', ExtType::T_LONG);
$gen->phpglfwBuffers[] = new PHPGLFWBuffer('ByteBuffer', 'GLbyte', ExtType::T_LONG);
$gen->phpglfwBuffers[] = new PHPGLFWBuffer('UByteBuffer', 'GLubyte', ExtType::T_LONG);

// handle adjustments
$gen->adjust(PHPGlfwAdjustments\GLFWOptionalArgsAdjustments::class);
$gen->adjust(PHPGlfwAdjustments\GLFWDestroyFunctionAdjustment::class);
$gen->adjust(PHPGlfwAdjustments\GLFWGladLoader::class);
$gen->adjust(PHPGlfwAdjustments\GLFWSwapBuffersAdjustment::class);
$gen->adjust(PHPGlfwAdjustments\GLFWCallbacksAdjustment::class);
$gen->adjust(PHPGlfwAdjustments\GLFWCreateWindowAdjustment::class);
$gen->adjust(PHPGlfwAdjustments\GLShaderSourceAdjustment::class);
$gen->adjust(PHPGlfwAdjustments\GLBufferDataAdjustment::class);
$gen->adjust(PHPGlfwAdjustments\GLVertexAttribPointerAdjustment::class);
$gen->adjust(PHPGlfwAdjustments\GLGenFunctionAdjustments::class);
$gen->adjust(PHPGlfwAdjustments\GLDestroyFunctionAdjustments::class);
$gen->adjust(PHPGlfwAdjustments\GLGetFunctionAdjustments::class);
$gen->adjust(PHPGlfwAdjustments\GlUniformMathObjAdjustment::class);
$gen->adjust(PHPGlfwAdjustments\GLTexImage2DAdjustment::class);
$gen->adjust(PHPGlfwAdjustments\GLGetStringAdjustment::class);
$gen->adjust(PHPGlfwAdjustments\GLVectorSetterFunctionAdjustment::class);
$gen->adjust(PHPGlfwAdjustments\GLGetShaderInfoLogAdjustment::class);
$gen->adjust(PHPGlfwAdjustments\GLReadPixelsAdjustment::class);
$gen->adjust(PHPGlfwAdjustments\GLConstVoidPtrAsUint::class);
$gen->adjust(PHPGlfwAdjustments\BooleanConstAdjustment::class);
$gen->adjust(PHPGlfwAdjustments\NVGCurrentTansformAdjustment::class);
$gen->adjust(PHPGlfwAdjustments\NVGTextBoundsAdjustment::class);

// build the extension
$gen->build(GEN_PATH_EXT . '/v2/');
