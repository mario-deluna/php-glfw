{
    "glViewportArray": {
        "summary": "set multiple viewports",
        "params": {
            "first": {
                "desc": "Specify the first viewport to set."
            },
            "count": {
                "desc": "Specify the number of viewports to set."
            },
            "v": {
                "desc": "Specify the address of an array containing the viewport parameters."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glScissorArray": {
        "summary": "define the scissor box for multiple viewports",
        "params": {
            "first": {
                "desc": "Specifies the index of the first viewport whose scissor box to modify."
            },
            "count": {
                "desc": "Specifies the number of scissor boxes to modify."
            },
            "v": {
                "desc": "Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "gl_GlobalInvocationID": {
        "summary": "contains the global index of work item currently being operated on by a compute shader",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetVertexAttribPointerv": {
        "summary": "return the address of the specified generic vertex attribute pointer",
        "params": {
            "index": {
                "desc": "Specifies the generic vertex attribute parameter to be returned."
            },
            "pname": {
                "desc": "Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be <constant>GL_VERTEX_ATTRIB_ARRAY_POINTER<\/constant>."
            },
            "pointer": {
                "desc": "Returns the pointer value."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glCreateTransformFeedbacks": {
        "summary": "create transform feedback objects",
        "params": {
            "n": {
                "desc": "Number of transform feedback objects to create."
            },
            "ids": {
                "desc": "Specifies an array in which names of the new transform feedback objects are stored."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBufferStorage": {
        "summary": "creates and initializes a buffer object's immutable data\n    store",
        "params": {
            "target": {
                "desc": "Specifies the target to which the buffer object is bound for glBufferStorage, which must be one of the buffer binding targets in the following table:"
            },
            "buffer": {
                "desc": "Specifies the name of the buffer object for glNamedBufferStorage function."
            },
            "size": {
                "desc": "Specifies the size in bytes of the buffer object's new data store."
            },
            "data": {
                "desc": "Specifies a pointer to data that will be copied into the data store for initialization, or <constant>NULL<\/constant> if no data is to be copied."
            },
            "flags": {
                "desc": "Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. <constant>GL_DYNAMIC_STORAGE_BIT<\/constant>, <constant>GL_MAP_READ_BIT<\/constant> <constant>GL_MAP_WRITE_BIT<\/constant>, <constant>GL_MAP_PERSISTENT_BIT<\/constant>, <constant>GL_MAP_COHERENT_BIT<\/constant>, and <constant>GL_CLIENT_STORAGE_BIT<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n  "
    },
    "glShaderStorageBlockBinding": {
        "summary": "change an active shader storage block binding",
        "params": {
            "program": {
                "desc": "The name of the program containing the block whose binding to change."
            },
            "storageBlockIndex": {
                "desc": "The index storage block within the program."
            },
            "storageBlockBinding": {
                "desc": "The index storage block binding to associate with the specified storage block."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glPopDebugGroup": {
        "summary": "pop the active debug group",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glVertexArrayElementBuffer": {
        "summary": "configures element array buffer binding of a vertex array object",
        "params": {
            "vaobj": {
                "desc": "Specifies the name of the vertex array object."
            },
            "buffer": {
                "desc": "Specifies the name of the buffer object to use for the element array buffer binding."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glUseProgramStages": {
        "summary": "bind stages of a program object to a program pipeline",
        "params": {
            "pipeline": {
                "desc": "Specifies the program pipeline object to which to bind stages from program."
            },
            "stages": {
                "desc": "Specifies a set of program stages to bind to the program pipeline object."
            },
            "program": {
                "desc": "Specifies the program object containing the shader executables to use in pipeline."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glIsEnabled": {
        "summary": "test whether a capability is enabled",
        "params": {
            "cap": {
                "desc": "Specifies a symbolic constant indicating a GL capability."
            },
            "index": {
                "desc": "Specifies the index of the capability."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glReleaseShaderCompiler": {
        "summary": "release resources consumed by the implementation's shader compiler",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetInternalformat": {
        "summary": "retrieve information about implementation-dependent support for internal formats",
        "params": {
            "target": {
                "desc": "Indicates the usage of the internal format. target must be <constant>GL_TEXTURE_1D<\/constant>, <constant>GL_TEXTURE_1D_ARRAY<\/constant>, <constant>GL_TEXTURE_2D<\/constant>, <constant>GL_TEXTURE_2D_ARRAY<\/constant>, <constant>GL_TEXTURE_3D<\/constant>, <constant>GL_TEXTURE_CUBE_MAP<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_ARRAY<\/constant>, <constant>GL_TEXTURE_RECTANGLE<\/constant>, <constant>GL_TEXTURE_BUFFER<\/constant>, <constant>GL_RENDERBUFFER<\/constant>, <constant>GL_TEXTURE_2D_MULTISAMPLE<\/constant> or <constant>GL_TEXTURE_2D_MULTISAMPLE_ARRAY<\/constant>."
            },
            "internalformat": {
                "desc": "Specifies the internal format about which to retrieve information."
            },
            "pname": {
                "desc": "Specifies the type of information to query."
            },
            "bufSize": {
                "desc": "Specifies the maximum number of integers of the specified width that may be written to params by the function."
            },
            "params": {
                "desc": "Specifies the address of a variable into which to write the retrieved information."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2011-2018 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBindBufferBase": {
        "summary": "bind a buffer object to an indexed buffer target",
        "params": {
            "target": {
                "desc": "Specify the target of the bind operation. target must be one of <constant>GL_ATOMIC_COUNTER_BUFFER<\/constant>, <constant>GL_TRANSFORM_FEEDBACK_BUFFER<\/constant>, <constant>GL_UNIFORM_BUFFER<\/constant> or <constant>GL_SHADER_STORAGE_BUFFER<\/constant>."
            },
            "index": {
                "desc": "Specify the index of the binding point within the array specified by target."
            },
            "buffer": {
                "desc": "The name of a buffer object to bind to the specified binding point."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDrawArrays": {
        "summary": "render primitives from array data",
        "params": {
            "mode": {
                "desc": "Specifies what kind of primitives to render. Symbolic constants <constant>GL_POINTS<\/constant>, <constant>GL_LINE_STRIP<\/constant>, <constant>GL_LINE_LOOP<\/constant>, <constant>GL_LINES<\/constant>, <constant>GL_LINE_STRIP_ADJACENCY<\/constant>, <constant>GL_LINES_ADJACENCY<\/constant>, <constant>GL_TRIANGLE_STRIP<\/constant>, <constant>GL_TRIANGLE_FAN<\/constant>, <constant>GL_TRIANGLES<\/constant>, <constant>GL_TRIANGLE_STRIP_ADJACENCY<\/constant>, <constant>GL_TRIANGLES_ADJACENCY<\/constant> and <constant>GL_PATCHES<\/constant> are accepted."
            },
            "first": {
                "desc": "Specifies the starting index in the enabled arrays."
            },
            "count": {
                "desc": "Specifies the number of indices to be rendered."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glInvalidateSubFramebuffer": {
        "summary": "invalidate the content of a region of some or all of a framebuffer's attachments",
        "params": {
            "target": {
                "desc": "Specifies the target to which the framebuffer object is attached for glInvalidateSubFramebuffer."
            },
            "framebuffer": {
                "desc": "Specifies the name of the framebuffer object for glInvalidateNamedFramebufferSubData."
            },
            "numAttachments": {
                "desc": "Specifies the number of entries in the attachments array."
            },
            "attachments": {
                "desc": "Specifies a pointer to an array identifying the attachments to be invalidated."
            },
            "x": {
                "desc": "Specifies the X offset of the region to be invalidated."
            },
            "y": {
                "desc": "Specifies the Y offset of the region to be invalidated."
            },
            "width": {
                "desc": "Specifies the width of the region to be invalidated."
            },
            "height": {
                "desc": "Specifies the height of the region to be invalidated."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetActiveUniformName": {
        "summary": "query the name of an active uniform",
        "params": {
            "program": {
                "desc": "Specifies the program containing the active uniform index uniformIndex."
            },
            "uniformIndex": {
                "desc": "Specifies the index of the active uniform whose name to query."
            },
            "bufSize": {
                "desc": "Specifies the size of the buffer, in units of GLchar, of the buffer whose address is specified in uniformName."
            },
            "length": {
                "desc": "Specifies the address of a variable that will receive the number of characters that were or would have been written to the buffer addressed by uniformName."
            },
            "uniformName": {
                "desc": "Specifies the address of a buffer into which the GL will place the name of the active uniform at uniformIndex within program."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetSubroutineUniformLocation": {
        "summary": "retrieve the location of a subroutine uniform of a given shader stage within a program",
        "params": {
            "program": {
                "desc": "Specifies the name of the program containing shader stage."
            },
            "shadertype": {
                "desc": "Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of <constant>GL_VERTEX_SHADER<\/constant>, <constant>GL_TESS_CONTROL_SHADER<\/constant>, <constant>GL_TESS_EVALUATION_SHADER<\/constant>, <constant>GL_GEOMETRY_SHADER<\/constant> or <constant>GL_FRAGMENT_SHADER<\/constant>."
            },
            "name": {
                "desc": "Specifies the name of the subroutine uniform whose index to query."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "gl_TessLevelInner": {
        "summary": "contains the inner tessellation levels for the current patch",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glViewport": {
        "summary": "set the viewport",
        "params": {
            "x": {
                "desc": "Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0)."
            },
            "width": {
                "desc": "Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "gl_SampleMaskIn": {
        "summary": "contains the computed sample coverage mask for the current fragment",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetProgram": {
        "summary": "Returns a parameter from a program object",
        "params": {
            "program": {
                "desc": "Specifies the program object to be queried."
            },
            "pname": {
                "desc": "Specifies the object parameter. Accepted symbolic names are <constant>GL_DELETE_STATUS<\/constant>, <constant>GL_LINK_STATUS<\/constant>, <constant>GL_VALIDATE_STATUS<\/constant>, <constant>GL_INFO_LOG_LENGTH<\/constant>, <constant>GL_ATTACHED_SHADERS<\/constant>, <constant>GL_ACTIVE_ATOMIC_COUNTER_BUFFERS<\/constant>, <constant>GL_ACTIVE_ATTRIBUTES<\/constant>, <constant>GL_ACTIVE_ATTRIBUTE_MAX_LENGTH<\/constant>, <constant>GL_ACTIVE_UNIFORMS<\/constant>, <constant>GL_ACTIVE_UNIFORM_BLOCKS<\/constant>, <constant>GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH<\/constant>, <constant>GL_ACTIVE_UNIFORM_MAX_LENGTH<\/constant>, <constant>GL_COMPUTE_WORK_GROUP_SIZE<\/constant>, <constant>GL_PROGRAM_BINARY_LENGTH<\/constant>, <constant>GL_TRANSFORM_FEEDBACK_BUFFER_MODE<\/constant>, <constant>GL_TRANSFORM_FEEDBACK_VARYINGS<\/constant>, <constant>GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH<\/constant>, <constant>GL_GEOMETRY_VERTICES_OUT<\/constant>, <constant>GL_GEOMETRY_INPUT_TYPE<\/constant>, and <constant>GL_GEOMETRY_OUTPUT_TYPE<\/constant>."
            },
            "params": {
                "desc": "Returns the requested object parameter."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGenRenderbuffers": {
        "summary": "generate renderbuffer object names",
        "params": {
            "n": {
                "desc": "Specifies the number of renderbuffer object names to generate."
            },
            "renderbuffers": {
                "desc": "Specifies an array in which the generated renderbuffer object names are stored."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetQueryiv": {
        "summary": "return parameters of a query object target",
        "params": {
            "target": {
                "desc": "Specifies a query object target. Must be <constant>GL_SAMPLES_PASSED<\/constant>, <constant>GL_ANY_SAMPLES_PASSED<\/constant>, <constant>GL_ANY_SAMPLES_PASSED_CONSERVATIVE<\/constant> <constant>GL_PRIMITIVES_GENERATED<\/constant>, <constant>GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN<\/constant>, <constant>GL_TIME_ELAPSED<\/constant>, or <constant>GL_TIMESTAMP<\/constant>."
            },
            "pname": {
                "desc": "Specifies the symbolic name of a query object target parameter. Accepted values are <constant>GL_CURRENT_QUERY<\/constant> or <constant>GL_QUERY_COUNTER_BITS<\/constant>."
            },
            "params": {
                "desc": "Returns the requested data."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2005 Addison-Wesley.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glTexStorage3D": {
        "summary": "simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture",
        "params": {
            "target": {
                "desc": "Specifies the target to which the texture object is bound for glTexStorage3D. Must be one of <constant>GL_TEXTURE_3D<\/constant>, <constant>GL_TEXTURE_2D_ARRAY<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_ARRAY<\/constant>, <constant>GL_PROXY_TEXTURE_3D<\/constant>, <constant>GL_PROXY_TEXTURE_2D_ARRAY<\/constant> or <constant>GL_PROXY_TEXTURE_CUBE_MAP_ARRAY<\/constant>."
            },
            "texture": {
                "desc": "Specifies the texture object name for glTextureStorage3D. The effective target of texture must be one of the valid non-proxy target values above."
            },
            "levels": {
                "desc": "Specify the number of texture levels."
            },
            "internalformat": {
                "desc": "Specifies the sized internal format to be used to store texture image data."
            },
            "width": {
                "desc": "Specifies the width of the texture, in texels."
            },
            "height": {
                "desc": "Specifies the height of the texture, in texels."
            },
            "depth": {
                "desc": "Specifies the depth of the texture, in texels."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glFrontFace": {
        "summary": "define front- and back-facing polygons",
        "params": {
            "mode": {
                "desc": "Specifies the orientation of front-facing polygons. <constant>GL_CW<\/constant> and <constant>GL_CCW<\/constant> are accepted. The initial value is <constant>GL_CCW<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glDrawElementsInstancedBaseInstance": {
        "summary": "draw multiple instances of a set of elements with offset applied to instanced attributes",
        "params": {
            "mode": {
                "desc": "Specifies what kind of primitives to render. Symbolic constants <constant>GL_POINTS<\/constant>, <constant>GL_LINE_STRIP<\/constant>, <constant>GL_LINE_LOOP<\/constant>, <constant>GL_LINES<\/constant>, <constant>GL_LINE_STRIP_ADJACENCY<\/constant>, <constant>GL_LINES_ADJACENCY<\/constant>, <constant>GL_TRIANGLE_STRIP<\/constant>, <constant>GL_TRIANGLE_FAN<\/constant>, <constant>GL_TRIANGLES<\/constant>, <constant>GL_TRIANGLE_STRIP_ADJACENCY<\/constant>, <constant>GL_TRIANGLES_ADJACENCY<\/constant> and <constant>GL_PATCHES<\/constant> are accepted."
            },
            "count": {
                "desc": "Specifies the number of elements to be rendered."
            },
            "type": {
                "desc": "Specifies the type of the values in indices. Must be one of <constant>GL_UNSIGNED_BYTE<\/constant>, <constant>GL_UNSIGNED_SHORT<\/constant>, or <constant>GL_UNSIGNED_INT<\/constant>."
            },
            "indices": {
                "desc": "Specifies a pointer to the location where the indices are stored."
            },
            "instancecount": {
                "desc": "Specifies the number of instances of the specified range of indices to be rendered."
            },
            "baseinstance": {
                "desc": "Specifies the base instance for use in fetching instanced vertex attributes."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetProgramStage": {
        "summary": "retrieve properties of a program object corresponding to a specified shader stage",
        "params": {
            "program": {
                "desc": "Specifies the name of the program containing shader stage."
            },
            "shadertype": {
                "desc": "Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of <constant>GL_VERTEX_SHADER<\/constant>, <constant>GL_TESS_CONTROL_SHADER<\/constant>, <constant>GL_TESS_EVALUATION_SHADER<\/constant>, <constant>GL_GEOMETRY_SHADER<\/constant> or <constant>GL_FRAGMENT_SHADER<\/constant>."
            },
            "pname": {
                "desc": "Specifies the parameter of the shader to query. pname must be <constant>GL_ACTIVE_SUBROUTINE_UNIFORMS<\/constant>, <constant>GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS<\/constant>, <constant>GL_ACTIVE_SUBROUTINES<\/constant>, <constant>GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH<\/constant>, or <constant>GL_ACTIVE_SUBROUTINE_MAX_LENGTH<\/constant>."
            },
            "values": {
                "desc": "Specifies the address of a variable into which the queried value or values will be placed."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetVertexArrayIndexed": {
        "summary": "retrieve parameters of an attribute of a vertex array\n    object",
        "params": {
            "vaobj": {
                "desc": "Specifies the name of a vertex array object."
            },
            "index": {
                "desc": "Specifies the index of the vertex array object attribute. Must be a number between 0 and (<constant>GL_MAX_VERTEX_ATTRIBS<\/constant> - 1)."
            },
            "pname": {
                "desc": "Specifies the property to be used for the query. For glGetVertexArrayIndexediv, it must be one of the following values: <constant>GL_VERTEX_ATTRIB_ARRAY_ENABLED<\/constant>, <constant>GL_VERTEX_ATTRIB_ARRAY_SIZE<\/constant>, <constant>GL_VERTEX_ATTRIB_ARRAY_STRIDE<\/constant>, <constant>GL_VERTEX_ATTRIB_ARRAY_TYPE<\/constant>, <constant>GL_VERTEX_ATTRIB_ARRAY_NORMALIZED<\/constant>, <constant>GL_VERTEX_ATTRIB_ARRAY_INTEGER<\/constant>, <constant>GL_VERTEX_ATTRIB_ARRAY_LONG<\/constant>, <constant>GL_VERTEX_ATTRIB_ARRAY_DIVISOR<\/constant>, or <constant>GL_VERTEX_ATTRIB_RELATIVE_OFFSET<\/constant>. For glGetVertexArrayIndexed64v, it must be equal to <constant>GL_VERTEX_BINDING_OFFSET<\/constant>."
            },
            "param": {
                "desc": "Returns the requested value."
            }
        },
        "copyright": "Copyright\n\t\n\t    Copyright  2014 Khronos Group.\n\t    This material may be distributed subject to the terms and conditions set forth in\n\t    the Open Publication License, v 1.0, 8 June 1999.\n\t    https:\/\/opencontent.org\/openpub\/.\n\t\n    "
    },
    "glIsRenderbuffer": {
        "summary": "determine if a name corresponds to a renderbuffer object",
        "params": {
            "renderbuffer": {
                "desc": "Specifies a value that may be the name of a renderbuffer object."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glShaderSource": {
        "summary": "Replaces the source code in a shader object",
        "params": {
            "shader": {
                "desc": "Specifies the handle of the shader object whose source code is to be replaced."
            },
            "count": {
                "desc": "Specifies the number of elements in the string and length arrays."
            },
            "string": {
                "desc": "Specifies an array of pointers to strings containing the source code to be loaded into the shader."
            },
            "length": {
                "desc": "Specifies an array of string lengths."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glIsProgramPipeline": {
        "summary": "determine if a name corresponds to a program pipeline object",
        "params": {
            "pipeline": {
                "desc": "Specifies a value that may be the name of a program pipeline object."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetActiveSubroutineUniformName": {
        "summary": "query the name of an active shader subroutine uniform",
        "params": {
            "program": {
                "desc": "Specifies the name of the program containing the subroutine."
            },
            "shadertype": {
                "desc": "Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of <constant>GL_VERTEX_SHADER<\/constant>, <constant>GL_TESS_CONTROL_SHADER<\/constant>, <constant>GL_TESS_EVALUATION_SHADER<\/constant>, <constant>GL_GEOMETRY_SHADER<\/constant> or <constant>GL_FRAGMENT_SHADER<\/constant>."
            },
            "index": {
                "desc": "Specifies the index of the shader subroutine uniform."
            },
            "bufSize": {
                "desc": "Specifies the size of the buffer whose address is given in name."
            },
            "length": {
                "desc": "Specifies the address of a variable into which is written the number of characters copied into name."
            },
            "name": {
                "desc": "Specifies the address of a buffer that will receive the name of the specified shader subroutine uniform."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetFragDataIndex": {
        "summary": "query the bindings of color indices to user-defined varying out variables",
        "params": {
            "program": {
                "desc": "The name of the program containing varying out variable whose binding to query"
            },
            "name": {
                "desc": "The name of the user-defined varying out variable whose index to query"
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "gl_InstanceID": {
        "summary": "contains the index of the current primitive in an instanced draw command",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDeleteFramebuffers": {
        "summary": "delete framebuffer objects",
        "params": {
            "n": {
                "desc": "Specifies the number of framebuffer objects to be deleted."
            },
            "framebuffers": {
                "desc": "A pointer to an array containing n framebuffer objects to be deleted."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetAttribLocation": {
        "summary": "Returns the location of an attribute variable",
        "params": {
            "program": {
                "desc": "Specifies the program object to be queried."
            },
            "name": {
                "desc": "Points to a null terminated string containing the name of the attribute variable whose location is to be queried."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glClearTexSubImage": {
        "summary": "fills all or part of a texture image with a constant value",
        "params": {
            "texture": {
                "desc": "The name of an existing texture object containing the image to be cleared."
            },
            "level": {
                "desc": "The level of texture containing the region to be cleared."
            },
            "xoffset": {
                "desc": "The coordinate of the left edge of the region to be cleared."
            },
            "yoffset": {
                "desc": "The coordinate of the lower edge of the region to be cleared."
            },
            "zoffset": {
                "desc": "The coordinate of the front of the region to be cleared."
            },
            "width": {
                "desc": "The width of the region to be cleared."
            },
            "height": {
                "desc": "The height of the region to be cleared."
            },
            "depth": {
                "desc": "The depth of the region to be cleared."
            },
            "format": {
                "desc": "The format of the data whose address in memory is given by data."
            },
            "type": {
                "desc": "The type of the data whose address in memory is given by data."
            },
            "data": {
                "desc": "The address in memory of the data to be used to clear the specified region."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glCheckFramebufferStatus": {
        "summary": "check the completeness status of a framebuffer",
        "params": {
            "target": {
                "desc": "Specify the target to which the framebuffer is bound for glCheckFramebufferStatus, and the target against which framebuffer completeness of framebuffer is checked for glCheckNamedFramebufferStatus."
            },
            "framebuffer": {
                "desc": "Specifies the name of the framebuffer object for glCheckNamedFramebufferStatus"
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glFlushMappedBufferRange": {
        "summary": "indicate modifications to a range of a mapped buffer",
        "params": {
            "target": {
                "desc": "Specifies the target to which the buffer object is bound for glFlushMappedBufferRange, which must be one of the buffer binding targets in the following table:"
            },
            "buffer": {
                "desc": "Specifies the name of the buffer object for glFlushMappedNamedBufferRange."
            },
            "offset": {
                "desc": "Specifies the start of the buffer subrange, in basic machine units."
            },
            "length": {
                "desc": "Specifies the length of the buffer subrange, in basic machine units."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGenFramebuffers": {
        "summary": "generate framebuffer object names",
        "params": {
            "n": {
                "desc": "Specifies the number of framebuffer object names to generate."
            },
            "ids": {
                "desc": "Specifies an array in which the generated framebuffer object names are stored."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDrawElements": {
        "summary": "render primitives from array data",
        "params": {
            "mode": {
                "desc": "Specifies what kind of primitives to render. Symbolic constants <constant>GL_POINTS<\/constant>, <constant>GL_LINE_STRIP<\/constant>, <constant>GL_LINE_LOOP<\/constant>, <constant>GL_LINES<\/constant>, <constant>GL_LINE_STRIP_ADJACENCY<\/constant>, <constant>GL_LINES_ADJACENCY<\/constant>, <constant>GL_TRIANGLE_STRIP<\/constant>, <constant>GL_TRIANGLE_FAN<\/constant>, <constant>GL_TRIANGLES<\/constant>, <constant>GL_TRIANGLE_STRIP_ADJACENCY<\/constant>, <constant>GL_TRIANGLES_ADJACENCY<\/constant> and <constant>GL_PATCHES<\/constant> are accepted."
            },
            "count": {
                "desc": "Specifies the number of elements to be rendered."
            },
            "type": {
                "desc": "Specifies the type of the values in indices. Must be one of <constant>GL_UNSIGNED_BYTE<\/constant>, <constant>GL_UNSIGNED_SHORT<\/constant>, or <constant>GL_UNSIGNED_INT<\/constant>."
            },
            "indices": {
                "desc": "Specifies a pointer to the location where the indices are stored."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "gl_SampleMask": {
        "summary": "specifies the sample coverage mask for the current fragment",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBindRenderbuffer": {
        "summary": "bind a renderbuffer to a renderbuffer target",
        "params": {
            "target": {
                "desc": "Specifies the renderbuffer target of the binding operation. target must be <constant>GL_RENDERBUFFER<\/constant>."
            },
            "renderbuffer": {
                "desc": "Specifies the name of the renderbuffer object to bind."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetTexImage": {
        "summary": "return a texture image",
        "params": {
            "target": {
                "desc": "Specifies the target to which the texture is bound for glGetTexImage and glGetnTexImage functions. <constant>GL_TEXTURE_1D<\/constant>, <constant>GL_TEXTURE_2D<\/constant>, <constant>GL_TEXTURE_3D<\/constant>, <constant>GL_TEXTURE_1D_ARRAY<\/constant>, <constant>GL_TEXTURE_2D_ARRAY<\/constant>, <constant>GL_TEXTURE_RECTANGLE<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_X<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_X<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_Y<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_Y<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_Z<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_Z<\/constant>, and <constant>GL_TEXTURE_CUBE_MAP_ARRAY<\/constant> are acceptable."
            },
            "texture": {
                "desc": "Specifies the texture object name."
            },
            "level": {
                "desc": "Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level n is the nth mipmap reduction image."
            },
            "format": {
                "desc": "Specifies a pixel format for the returned data. The supported formats are <constant>GL_STENCIL_INDEX<\/constant>, <constant>GL_DEPTH_COMPONENT<\/constant>, <constant>GL_DEPTH_STENCIL<\/constant>, <constant>GL_RED<\/constant>, <constant>GL_GREEN<\/constant>, <constant>GL_BLUE<\/constant>, <constant>GL_RG<\/constant>, <constant>GL_RGB<\/constant>, <constant>GL_RGBA<\/constant>, <constant>GL_BGR<\/constant>, <constant>GL_BGRA<\/constant>, <constant>GL_RED_INTEGER<\/constant>, <constant>GL_GREEN_INTEGER<\/constant>, <constant>GL_BLUE_INTEGER<\/constant>, <constant>GL_RG_INTEGER<\/constant>, <constant>GL_RGB_INTEGER<\/constant>, <constant>GL_RGBA_INTEGER<\/constant>, <constant>GL_BGR_INTEGER<\/constant>, <constant>GL_BGRA_INTEGER<\/constant>."
            },
            "type": {
                "desc": "Specifies a pixel type for the returned data. The supported types are <constant>GL_UNSIGNED_BYTE<\/constant>, <constant>GL_BYTE<\/constant>, <constant>GL_UNSIGNED_SHORT<\/constant>, <constant>GL_SHORT<\/constant>, <constant>GL_UNSIGNED_INT<\/constant>, <constant>GL_INT<\/constant>, <constant>GL_HALF_FLOAT<\/constant>, <constant>GL_FLOAT<\/constant>, <constant>GL_UNSIGNED_BYTE_3_3_2<\/constant>, <constant>GL_UNSIGNED_BYTE_2_3_3_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_5_6_5<\/constant>, <constant>GL_UNSIGNED_SHORT_5_6_5_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_4_4_4_4<\/constant>, <constant>GL_UNSIGNED_SHORT_4_4_4_4_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_5_5_5_1<\/constant>, <constant>GL_UNSIGNED_SHORT_1_5_5_5_REV<\/constant>, <constant>GL_UNSIGNED_INT_8_8_8_8<\/constant>, <constant>GL_UNSIGNED_INT_8_8_8_8_REV<\/constant>, <constant>GL_UNSIGNED_INT_10_10_10_2<\/constant>, <constant>GL_UNSIGNED_INT_2_10_10_10_REV<\/constant>, <constant>GL_UNSIGNED_INT_24_8<\/constant>, <constant>GL_UNSIGNED_INT_10F_11F_11F_REV<\/constant>, <constant>GL_UNSIGNED_INT_5_9_9_9_REV<\/constant>, and <constant>GL_FLOAT_32_UNSIGNED_INT_24_8_REV<\/constant>."
            },
            "bufSize": {
                "desc": "Specifies the size of the buffer pixels for glGetnTexImage and glGetTextureImage functions."
            },
            "pixels": {
                "desc": "Returns the texture image. Should be a pointer to an array of the type specified by type."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glGetVertexAttrib": {
        "summary": "Return a generic vertex attribute parameter",
        "params": {
            "index": {
                "desc": "Specifies the generic vertex attribute parameter to be queried."
            },
            "pname": {
                "desc": "Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are <constant>GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING<\/constant>, <constant>GL_VERTEX_ATTRIB_ARRAY_ENABLED<\/constant>, <constant>GL_VERTEX_ATTRIB_ARRAY_SIZE<\/constant>, <constant>GL_VERTEX_ATTRIB_ARRAY_STRIDE<\/constant>, <constant>GL_VERTEX_ATTRIB_ARRAY_TYPE<\/constant>, <constant>GL_VERTEX_ATTRIB_ARRAY_NORMALIZED<\/constant>, <constant>GL_VERTEX_ATTRIB_ARRAY_INTEGER<\/constant>, <constant>GL_VERTEX_ATTRIB_ARRAY_LONG<\/constant>, <constant>GL_VERTEX_ATTRIB_ARRAY_DIVISOR<\/constant>, <constant>GL_VERTEX_ATTRIB_BINDING<\/constant>, <constant>GL_VERTEX_ATTRIB_RELATIVE_OFFSET<\/constant> or <constant>GL_CURRENT_VERTEX_ATTRIB<\/constant>."
            },
            "params": {
                "desc": "Returns the requested data."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glCreateFramebuffers": {
        "summary": "create framebuffer objects",
        "params": {
            "n": {
                "desc": "Number of framebuffer objects to create."
            },
            "framebuffers": {
                "desc": "Specifies an array in which names of the new framebuffer objects are stored."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glActiveTexture": {
        "summary": "select active texture unit",
        "params": {
            "texture": {
                "desc": "Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least 80. texture must be one of <constant>GL_TEXTURE<\/constant>i, where i ranges from zero to the value of <constant>GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS<\/constant> minus one. The initial value is <constant>GL_TEXTURE0<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glColorMask": {
        "summary": "enable and disable writing of frame buffer color components",
        "params": {
            "buf": {
                "desc": "For glColorMaski, specifies the index of the draw buffer whose color mask to set."
            },
            "red": {
                "desc": "Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all <constant>GL_TRUE<\/constant>, indicating that the color components are written."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glGenQueries": {
        "summary": "generate query object names",
        "params": {
            "n": {
                "desc": "Specifies the number of query object names to be generated."
            },
            "ids": {
                "desc": "Specifies an array in which the generated query object names are stored."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2005 Addison-Wesley.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDeleteSamplers": {
        "summary": "delete named sampler objects",
        "params": {
            "n": {
                "desc": "Specifies the number of sampler objects to be deleted."
            },
            "samplers": {
                "desc": "Specifies an array of sampler objects to be deleted."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glTexStorage2D": {
        "summary": "simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture",
        "params": {
            "target": {
                "desc": "Specifies the target to which the texture object is bound for glTexStorage2D. Must be one of <constant>GL_TEXTURE_2D<\/constant>, <constant>GL_TEXTURE_1D_ARRAY<\/constant>, <constant>GL_TEXTURE_RECTANGLE<\/constant>, <constant>GL_TEXTURE_CUBE_MAP<\/constant>, <constant>GL_PROXY_TEXTURE_2D<\/constant>, <constant>GL_PROXY_TEXTURE_1D_ARRAY<\/constant>, <constant>GL_PROXY_TEXTURE_RECTANGLE<\/constant>, or <constant>GL_PROXY_TEXTURE_CUBE_MAP<\/constant>."
            },
            "texture": {
                "desc": "Specifies the texture object name for glTextureStorage2D. The effective target of texture must be one of the valid non-proxy target values above."
            },
            "levels": {
                "desc": "Specify the number of texture levels."
            },
            "internalformat": {
                "desc": "Specifies the sized internal format to be used to store texture image data."
            },
            "width": {
                "desc": "Specifies the width of the texture, in texels."
            },
            "height": {
                "desc": "Specifies the height of the texture, in texels."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glFramebufferTextureLayer": {
        "summary": "attach a single layer of a texture object as a logical buffer of a framebuffer object",
        "params": {
            "target": {
                "desc": "Specifies the target to which the framebuffer is bound for glFramebufferTextureLayer."
            },
            "framebuffer": {
                "desc": "Specifies the name of the framebuffer object for glNamedFramebufferTextureLayer."
            },
            "attachment": {
                "desc": "Specifies the attachment point of the framebuffer."
            },
            "texture": {
                "desc": "Specifies the name of an existing texture object to attach."
            },
            "level": {
                "desc": "Specifies the mipmap level of the texture object to attach."
            },
            "layer": {
                "desc": "Specifies the layer of the texture object to attach."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGenProgramPipelines": {
        "summary": "reserve program pipeline object names",
        "params": {
            "n": {
                "desc": "Specifies the number of program pipeline object names to reserve."
            },
            "pipelines": {
                "desc": "Specifies an array of into which the reserved names will be written."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "gl_Layer": {
        "summary": "contains the selected layer of a multi-layer framebuffer attachment",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetUniformBlockIndex": {
        "summary": "retrieve the index of a named uniform block",
        "params": {
            "program": {
                "desc": "Specifies the name of a program containing the uniform block."
            },
            "uniformBlockName": {
                "desc": "Specifies the address an array of characters to containing the name of the uniform block whose index to retrieve."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGet": {
        "summary": "return the value or values of a selected parameter",
        "params": {
            "pname": {
                "desc": "Specifies the parameter value to be returned for non-indexed versions of glGet. The symbolic constants in the list below are accepted."
            },
            "target": {
                "desc": "Specifies the parameter value to be returned for indexed versions of glGet. The symbolic constants in the list below are accepted."
            },
            "index": {
                "desc": "Specifies the index of the particular element being queried."
            },
            "data": {
                "desc": "Returns the value or values of the specified parameter."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glQueryCounter": {
        "summary": "record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.",
        "params": {
            "id": {
                "desc": "Specify the name of a query object into which to record the GL time."
            },
            "target": {
                "desc": "Specify the counter to query. target must be <constant>GL_TIMESTAMP<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glCullFace": {
        "summary": "specify whether front- or back-facing facets can be culled",
        "params": {
            "mode": {
                "desc": "Specifies whether front- or back-facing facets are candidates for culling. Symbolic constants <constant>GL_FRONT<\/constant>, <constant>GL_BACK<\/constant>, and <constant>GL_FRONT_AND_BACK<\/constant> are accepted. The initial value is <constant>GL_BACK<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glBindFragDataLocation": {
        "summary": "bind a user-defined varying out variable to a fragment shader color number",
        "params": {
            "program": {
                "desc": "The name of the program containing varying out variable whose binding to modify"
            },
            "colorNumber": {
                "desc": "The color number to bind the user-defined varying out variable to"
            },
            "name": {
                "desc": "The name of the user-defined varying out variable whose binding to modify"
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetUniform": {
        "summary": "Returns the value of a uniform variable",
        "params": {
            "program": {
                "desc": "Specifies the program object to be queried."
            },
            "location": {
                "desc": "Specifies the location of the uniform variable to be queried."
            },
            "bufSize": {
                "desc": "Specifies the size of the buffer params."
            },
            "params": {
                "desc": "Returns the value of the specified uniform variable."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBlitFramebuffer": {
        "summary": "copy a block of pixels from one framebuffer object to another",
        "params": {
            "readFramebuffer": {
                "desc": "Specifies the name of the source framebuffer object for glBlitNamedFramebuffer."
            },
            "drawFramebuffer": {
                "desc": "Specifies the name of the destination framebuffer object for glBlitNamedFramebuffer."
            },
            "srcX0": {
                "desc": "Specify the bounds of the source rectangle within the read buffer of the read framebuffer."
            },
            "dstX0": {
                "desc": "Specify the bounds of the destination rectangle within the write buffer of the write framebuffer."
            },
            "mask": {
                "desc": "The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are <constant>GL_COLOR_BUFFER_BIT<\/constant>, <constant>GL_DEPTH_BUFFER_BIT<\/constant> and <constant>GL_STENCIL_BUFFER_BIT<\/constant>."
            },
            "filter": {
                "desc": "Specifies the interpolation to be applied if the image is stretched. Must be <constant>GL_NEAREST<\/constant> or <constant>GL_LINEAR<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGenTextures": {
        "summary": "generate texture names",
        "params": {
            "n": {
                "desc": "Specifies the number of texture names to be generated."
            },
            "textures": {
                "desc": "Specifies an array in which the generated texture names are stored."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glReadPixels": {
        "summary": "read a block of pixels from the frame buffer",
        "params": {
            "x": {
                "desc": "Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels."
            },
            "width": {
                "desc": "Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel."
            },
            "format": {
                "desc": "Specifies the format of the pixel data. The following symbolic values are accepted: <constant>GL_STENCIL_INDEX<\/constant>, <constant>GL_DEPTH_COMPONENT<\/constant>, <constant>GL_DEPTH_STENCIL<\/constant>, <constant>GL_RED<\/constant>, <constant>GL_GREEN<\/constant>, <constant>GL_BLUE<\/constant>, <constant>GL_RGB<\/constant>, <constant>GL_BGR<\/constant>, <constant>GL_RGBA<\/constant>, and <constant>GL_BGRA<\/constant>."
            },
            "type": {
                "desc": "Specifies the data type of the pixel data. Must be one of <constant>GL_UNSIGNED_BYTE<\/constant>, <constant>GL_BYTE<\/constant>, <constant>GL_UNSIGNED_SHORT<\/constant>, <constant>GL_SHORT<\/constant>, <constant>GL_UNSIGNED_INT<\/constant>, <constant>GL_INT<\/constant>, <constant>GL_HALF_FLOAT<\/constant>, <constant>GL_FLOAT<\/constant>, <constant>GL_UNSIGNED_BYTE_3_3_2<\/constant>, <constant>GL_UNSIGNED_BYTE_2_3_3_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_5_6_5<\/constant>, <constant>GL_UNSIGNED_SHORT_5_6_5_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_4_4_4_4<\/constant>, <constant>GL_UNSIGNED_SHORT_4_4_4_4_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_5_5_5_1<\/constant>, <constant>GL_UNSIGNED_SHORT_1_5_5_5_REV<\/constant>, <constant>GL_UNSIGNED_INT_8_8_8_8<\/constant>, <constant>GL_UNSIGNED_INT_8_8_8_8_REV<\/constant>, <constant>GL_UNSIGNED_INT_10_10_10_2<\/constant>, <constant>GL_UNSIGNED_INT_2_10_10_10_REV<\/constant>, <constant>GL_UNSIGNED_INT_24_8<\/constant>, <constant>GL_UNSIGNED_INT_10F_11F_11F_REV<\/constant>, <constant>GL_UNSIGNED_INT_5_9_9_9_REV<\/constant>, or <constant>GL_FLOAT_32_UNSIGNED_INT_24_8_REV<\/constant>."
            },
            "bufSize": {
                "desc": "Specifies the size of the buffer data for glReadnPixels function."
            },
            "data": {
                "desc": "Returns the pixel data."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glBlendEquationSeparate": {
        "summary": "set the RGB blend equation and the alpha blend equation separately",
        "params": {
            "buf": {
                "desc": "for glBlendEquationSeparatei, specifies the index of the draw buffer for which to set the blend equations."
            },
            "modeRGB": {
                "desc": "specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be <constant>GL_FUNC_ADD<\/constant>, <constant>GL_FUNC_SUBTRACT<\/constant>, <constant>GL_FUNC_REVERSE_SUBTRACT<\/constant>, <constant>GL_MIN<\/constant>, <constant>GL_MAX<\/constant>."
            },
            "modeAlpha": {
                "desc": "specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be <constant>GL_FUNC_ADD<\/constant>, <constant>GL_FUNC_SUBTRACT<\/constant>, <constant>GL_FUNC_REVERSE_SUBTRACT<\/constant>, <constant>GL_MIN<\/constant>, <constant>GL_MAX<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetProgramInfoLog": {
        "summary": "Returns the information log for a program object",
        "params": {
            "program": {
                "desc": "Specifies the program object whose information log is to be queried."
            },
            "maxLength": {
                "desc": "Specifies the size of the character buffer for storing the returned information log."
            },
            "length": {
                "desc": "Returns the length of the string returned in infoLog (excluding the null terminator)."
            },
            "infoLog": {
                "desc": "Specifies an array of characters that is used to return the information log."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glCreateShaderProgram": {
        "summary": "create a stand-alone program from an array of null-terminated source code strings",
        "params": {
            "type": {
                "desc": "Specifies the type of shader to create."
            },
            "count": {
                "desc": "Specifies the number of source code strings in the array strings."
            },
            "strings": {
                "desc": "Specifies the address of an array of pointers to source code strings from which to create the program object."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glCopyImageSubData": {
        "summary": "perform a raw data copy between two images",
        "params": {
            "srcName": {
                "desc": "The name of a texture or renderbuffer object from which to copy."
            },
            "srcTarget": {
                "desc": "The target representing the namespace of the source name srcName."
            },
            "srcLevel": {
                "desc": "The mipmap level to read from the source."
            },
            "srcX": {
                "desc": "The X coordinate of the left edge of the souce region to copy."
            },
            "srcY": {
                "desc": "The Y coordinate of the top edge of the souce region to copy."
            },
            "srcZ": {
                "desc": "The Z coordinate of the near edge of the souce region to copy."
            },
            "dstName": {
                "desc": "The name of a texture or renderbuffer object to which to copy."
            },
            "dstTarget": {
                "desc": "The target representing the namespace of the destination name dstName."
            },
            "dstX": {
                "desc": "The X coordinate of the left edge of the destination region."
            },
            "dstY": {
                "desc": "The Y coordinate of the top edge of the destination region."
            },
            "dstZ": {
                "desc": "The Z coordinate of the near edge of the destination region."
            },
            "srcWidth": {
                "desc": "The width of the region to be copied."
            },
            "srcHeight": {
                "desc": "The height of the region to be copied."
            },
            "srcDepth": {
                "desc": "The depth of the region to be copied."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetPointerv": {
        "summary": "return the address of the specified pointer",
        "params": {
            "pname": {
                "desc": "Specifies the pointer to be returned. Must be one of <constant>GL_DEBUG_CALLBACK_FUNCTION<\/constant> or <constant>GL_DEBUG_CALLBACK_USER_PARAM<\/constant>."
            },
            "params": {
                "desc": "Returns the pointer value specified by pname."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDrawElementsInstancedBaseVertex": {
        "summary": "render multiple instances of a set of primitives from array data with a per-element offset",
        "params": {
            "mode": {
                "desc": "Specifies what kind of primitives to render. Symbolic constants <constant>GL_POINTS<\/constant>, <constant>GL_LINE_STRIP<\/constant>, <constant>GL_LINE_LOOP<\/constant>, <constant>GL_LINES<\/constant>, <constant>GL_TRIANGLE_STRIP<\/constant>, <constant>GL_TRIANGLE_FAN<\/constant>, <constant>GL_TRIANGLES<\/constant>, <constant>GL_LINES_ADJACENCY<\/constant>, <constant>GL_LINE_STRIP_ADJACENCY<\/constant>, <constant>GL_TRIANGLES_ADJACENCY<\/constant>, <constant>GL_TRIANGLE_STRIP_ADJACENCY<\/constant> and <constant>GL_PATCHES<\/constant> are accepted."
            },
            "count": {
                "desc": "Specifies the number of elements to be rendered."
            },
            "type": {
                "desc": "Specifies the type of the values in indices. Must be one of <constant>GL_UNSIGNED_BYTE<\/constant>, <constant>GL_UNSIGNED_SHORT<\/constant>, or <constant>GL_UNSIGNED_INT<\/constant>."
            },
            "indices": {
                "desc": "Specifies a pointer to the location where the indices are stored."
            },
            "instancecount": {
                "desc": "Specifies the number of instances of the indexed geometry that should be drawn."
            },
            "basevertex": {
                "desc": "Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glTexStorage2DMultisample": {
        "summary": "specify storage for a two-dimensional multisample texture",
        "params": {
            "target": {
                "desc": "Specifies the target to which the texture object is bound for glTexStorage2DMultisample. Must be one of <constant>GL_TEXTURE_2D_MULTISAMPLE<\/constant> or <constant>GL_PROXY_TEXTURE_2D_MULTISAMPLE<\/constant>."
            },
            "texture": {
                "desc": "Specifies the texture object name for glTextureStorage2DMultisample. The effective target of texture must be one of the valid non-proxy target values above."
            },
            "samples": {
                "desc": "Specify the number of samples in the texture."
            },
            "internalformat": {
                "desc": "Specifies the sized internal format to be used to store texture image data."
            },
            "width": {
                "desc": "Specifies the width of the texture, in texels."
            },
            "height": {
                "desc": "Specifies the height of the texture, in texels."
            },
            "fixedsamplelocations": {
                "desc": "Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glUseProgram": {
        "summary": "Installs a program object as part of current rendering state",
        "params": {
            "program": {
                "desc": "Specifies the handle of the program object whose executables are to be used as part of current rendering state."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetProgramResourceLocationIndex": {
        "summary": "query the fragment color index of a named variable within a program",
        "params": {
            "program": {
                "desc": "The name of a program object whose resources to query."
            },
            "programInterface": {
                "desc": "A token identifying the interface within program containing the resource named name."
            },
            "name": {
                "desc": "The name of the resource to query the location of."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "gl_PrimitiveIDIn": {
        "summary": "contains the index of the current primitive",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glCreateSamplers": {
        "summary": "create sampler objects",
        "params": {
            "n": {
                "desc": "Number of sampler objects to create."
            },
            "samplers": {
                "desc": "Specifies an array in which names of the new sampler objects are stored."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "gl_WorkGroupSize": {
        "summary": "contains the size of the workgroup operated on by a compute shader",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glPushDebugGroup": {
        "summary": "push a named debug group into the command stream",
        "params": {
            "source": {
                "desc": "The source of the debug message."
            },
            "id": {
                "desc": "The identifier of the message."
            },
            "length": {
                "desc": "The length of the message to be sent to the debug output stream."
            },
            "message": {
                "desc": "The a string containing the message to be sent to the debug output stream."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glTexParameter": {
        "summary": "set texture parameters",
        "params": {
            "target": {
                "desc": "Specifies the target to which the texture is bound for glTexParameter functions. Must be one of <constant>GL_TEXTURE_1D<\/constant>, <constant>GL_TEXTURE_1D_ARRAY<\/constant>, <constant>GL_TEXTURE_2D<\/constant>, <constant>GL_TEXTURE_2D_ARRAY<\/constant>, <constant>GL_TEXTURE_2D_MULTISAMPLE<\/constant>, <constant>GL_TEXTURE_2D_MULTISAMPLE_ARRAY<\/constant>, <constant>GL_TEXTURE_3D<\/constant>, <constant>GL_TEXTURE_CUBE_MAP<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_ARRAY<\/constant>, or <constant>GL_TEXTURE_RECTANGLE<\/constant>."
            },
            "texture": {
                "desc": "Specifies the texture object name for glTextureParameter functions."
            },
            "pname": {
                "desc": "Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: <constant>GL_DEPTH_STENCIL_TEXTURE_MODE<\/constant>, <constant>GL_TEXTURE_BASE_LEVEL<\/constant>, <constant>GL_TEXTURE_COMPARE_FUNC<\/constant>, <constant>GL_TEXTURE_COMPARE_MODE<\/constant>, <constant>GL_TEXTURE_LOD_BIAS<\/constant>, <constant>GL_TEXTURE_MIN_FILTER<\/constant>, <constant>GL_TEXTURE_MAG_FILTER<\/constant>, <constant>GL_TEXTURE_MIN_LOD<\/constant>, <constant>GL_TEXTURE_MAX_LOD<\/constant>, <constant>GL_TEXTURE_MAX_LEVEL<\/constant>, <constant>GL_TEXTURE_SWIZZLE_R<\/constant>, <constant>GL_TEXTURE_SWIZZLE_G<\/constant>, <constant>GL_TEXTURE_SWIZZLE_B<\/constant>, <constant>GL_TEXTURE_SWIZZLE_A<\/constant>, <constant>GL_TEXTURE_WRAP_S<\/constant>, <constant>GL_TEXTURE_WRAP_T<\/constant>, or <constant>GL_TEXTURE_WRAP_R<\/constant>."
            },
            "param": {
                "desc": "For the scalar commands, specifies the value of pname."
            },
            "params": {
                "desc": "For the vector commands, specifies a pointer to an array where the value or values of pname are stored."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006\n            Silicon Graphics, Inc.\n            Copyright  2012-2014\n            Khronos Group. This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glInvalidateTexSubImage": {
        "summary": "invalidate a region of a texture image",
        "params": {
            "texture": {
                "desc": "The name of a texture object a subregion of which to invalidate."
            },
            "level": {
                "desc": "The level of detail of the texture object within which the region resides."
            },
            "xoffset": {
                "desc": "The X offset of the region to be invalidated."
            },
            "yoffset": {
                "desc": "The Y offset of the region to be invalidated."
            },
            "zoffset": {
                "desc": "The Z offset of the region to be invalidated."
            },
            "width": {
                "desc": "The width of the region to be invalidated."
            },
            "height": {
                "desc": "The height of the region to be invalidated."
            },
            "depth": {
                "desc": "The depth of the region to be invalidated."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBindBuffer": {
        "summary": "bind a named buffer object",
        "params": {
            "target": {
                "desc": "Specifies the target to which the buffer object is bound, which must be one of the buffer binding targets in the following table:"
            },
            "buffer": {
                "desc": "Specifies the name of a buffer object."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2005 Addison-Wesley.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetObjectPtrLabel": {
        "summary": "retrieve the label of a sync object identified by a pointer",
        "params": {
            "ptr": {
                "desc": "The name of the sync object whose label to retrieve."
            },
            "bufSize": {
                "desc": "The length of the buffer whose address is in label."
            },
            "length": {
                "desc": "The address of a variable to receive the length of the object label."
            },
            "label": {
                "desc": "The address of a string that will receive the object label."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glActiveShaderProgram": {
        "summary": "set the active program object for a program pipeline object",
        "params": {
            "pipeline": {
                "desc": "Specifies the program pipeline object to set the active program object for."
            },
            "program": {
                "desc": "Specifies the program object to set as the active program pipeline object pipeline."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBindSamplers": {
        "summary": "bind one or more named sampler objects to a sequence of consecutive sampler units",
        "params": {
            "first": {
                "desc": "Specifies the first sampler unit to which a sampler object is to be bound."
            },
            "count": {
                "desc": "Specifies the number of samplers to bind."
            },
            "samplers": {
                "desc": "Specifies the address of an array of names of existing sampler objects."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glTextureView": {
        "summary": "initialize a texture as a data alias of another texture's data store",
        "params": {
            "texture": {
                "desc": "Specifies the texture object to be initialized as a view."
            },
            "target": {
                "desc": "Specifies the target to be used for the newly initialized texture."
            },
            "origtexture": {
                "desc": "Specifies the name of a texture object of which to make a view."
            },
            "internalformat": {
                "desc": "Specifies the internal format for the newly created view."
            },
            "minlevel": {
                "desc": "Specifies lowest level of detail of the view."
            },
            "numlevels": {
                "desc": "Specifies the number of levels of detail to include in the view."
            },
            "minlayer": {
                "desc": "Specifies the index of the first layer to include in the view."
            },
            "numlayers": {
                "desc": "Specifies the number of layers to include in the view."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDeleteProgram": {
        "summary": "Deletes a program object",
        "params": {
            "program": {
                "desc": "Specifies the program object to be deleted."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetProgramPipelineInfoLog": {
        "summary": "retrieve the info log string from a program pipeline object",
        "params": {
            "pipeline": {
                "desc": "Specifies the name of a program pipeline object from which to retrieve the info log."
            },
            "bufSize": {
                "desc": "Specifies the maximum number of characters, including the null terminator, that may be written into infoLog."
            },
            "length": {
                "desc": "Specifies the address of a variable into which will be written the number of characters written into infoLog."
            },
            "infoLog": {
                "desc": "Specifies the address of an array of characters into which will be written the info log for pipeline."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "gl_WorkGroupID": {
        "summary": "contains the index of the workgroup currently being operated on by a compute shader",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "gl_HelperInvocation": {
        "summary": "indicates whether a fragment shader invocation is a helper invocation",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glCopyTexSubImage2D": {
        "summary": "copy a two-dimensional texture subimage",
        "params": {
            "target": {
                "desc": "Specifies the target to which the texture object is bound for glCopyTexSubImage2D function. Must be <constant>GL_TEXTURE_1D_ARRAY<\/constant>, <constant>GL_TEXTURE_2D<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_X<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_X<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_Y<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_Y<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_Z<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_Z<\/constant>, or <constant>GL_TEXTURE_RECTANGLE<\/constant>."
            },
            "texture": {
                "desc": "Specifies the texture object name for glCopyTextureSubImage2D function."
            },
            "level": {
                "desc": "Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image."
            },
            "xoffset": {
                "desc": "Specifies a texel offset in the x direction within the texture array."
            },
            "yoffset": {
                "desc": "Specifies a texel offset in the y direction within the texture array."
            },
            "x": {
                "desc": "Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied."
            },
            "width": {
                "desc": "Specifies the width of the texture subimage."
            },
            "height": {
                "desc": "Specifies the height of the texture subimage."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006\n            Silicon Graphics, Inc. Copyright  2012-2014 Khronos Group.\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glHint": {
        "summary": "specify implementation-specific hints",
        "params": {
            "target": {
                "desc": "Specifies a symbolic constant indicating the behavior to be controlled. <constant>GL_LINE_SMOOTH_HINT<\/constant>, <constant>GL_POLYGON_SMOOTH_HINT<\/constant>, <constant>GL_TEXTURE_COMPRESSION_HINT<\/constant>, and <constant>GL_FRAGMENT_SHADER_DERIVATIVE_HINT<\/constant> are accepted."
            },
            "mode": {
                "desc": "Specifies a symbolic constant indicating the desired behavior. <constant>GL_FASTEST<\/constant>, <constant>GL_NICEST<\/constant>, and <constant>GL_DONT_CARE<\/constant> are accepted."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glGetTexLevelParameter": {
        "summary": "return texture parameter values for a specific level of\n    detail",
        "params": {
            "target": {
                "desc": "Specifies the target to which the texture is bound for glGetTexLevelParameterfv and glGetTexLevelParameteriv functions. Must be one of the following values: <constant>GL_TEXTURE_1D<\/constant>, <constant>GL_TEXTURE_2D<\/constant>, <constant>GL_TEXTURE_3D<\/constant>, <constant>GL_TEXTURE_1D_ARRAY<\/constant>, <constant>GL_TEXTURE_2D_ARRAY<\/constant>, <constant>GL_TEXTURE_RECTANGLE<\/constant>, <constant>GL_TEXTURE_2D_MULTISAMPLE<\/constant>, <constant>GL_TEXTURE_2D_MULTISAMPLE_ARRAY<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_X<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_X<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_Y<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_Y<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_Z<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_Z<\/constant>, <constant>GL_PROXY_TEXTURE_1D<\/constant>, <constant>GL_PROXY_TEXTURE_2D<\/constant>, <constant>GL_PROXY_TEXTURE_3D<\/constant>, <constant>GL_PROXY_TEXTURE_1D_ARRAY<\/constant>, <constant>GL_PROXY_TEXTURE_2D_ARRAY<\/constant>, <constant>GL_PROXY_TEXTURE_RECTANGLE<\/constant>, <constant>GL_PROXY_TEXTURE_2D_MULTISAMPLE<\/constant>, <constant>GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY<\/constant>, <constant>GL_PROXY_TEXTURE_CUBE_MAP<\/constant>, or <constant>GL_TEXTURE_BUFFER<\/constant>."
            },
            "texture": {
                "desc": "Specifies the texture object name for glGetTextureLevelParameterfv and glGetTextureLevelParameteriv functions."
            },
            "level": {
                "desc": "Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level n is the nth mipmap reduction image."
            },
            "pname": {
                "desc": "Specifies the symbolic name of a texture parameter. <constant>GL_TEXTURE_WIDTH<\/constant>, <constant>GL_TEXTURE_HEIGHT<\/constant>, <constant>GL_TEXTURE_DEPTH<\/constant>, <constant>GL_TEXTURE_INTERNAL_FORMAT<\/constant>, <constant>GL_TEXTURE_RED_SIZE<\/constant>, <constant>GL_TEXTURE_GREEN_SIZE<\/constant>, <constant>GL_TEXTURE_BLUE_SIZE<\/constant>, <constant>GL_TEXTURE_ALPHA_SIZE<\/constant>, <constant>GL_TEXTURE_DEPTH_SIZE<\/constant>, <constant>GL_TEXTURE_COMPRESSED<\/constant>, <constant>GL_TEXTURE_COMPRESSED_IMAGE_SIZE<\/constant>, and <constant>GL_TEXTURE_BUFFER_OFFSET<\/constant> are accepted."
            },
            "params": {
                "desc": "Returns the requested data."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006\n            Silicon Graphics, Inc. Copyright  2010-2014\n            Khronos Group. This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glGetTexParameter": {
        "summary": "return texture parameter values",
        "params": {
            "target": {
                "desc": "Specifies the target to which the texture is bound for glGetTexParameterfv, glGetTexParameteriv, glGetTexParameterIiv, and glGetTexParameterIuiv functions. <constant>GL_TEXTURE_1D<\/constant>, <constant>GL_TEXTURE_1D_ARRAY<\/constant>, <constant>GL_TEXTURE_2D<\/constant>, <constant>GL_TEXTURE_2D_ARRAY<\/constant>, <constant>GL_TEXTURE_2D_MULTISAMPLE<\/constant>, <constant>GL_TEXTURE_2D_MULTISAMPLE_ARRAY<\/constant>, <constant>GL_TEXTURE_3D<\/constant>, <constant>GL_TEXTURE_CUBE_MAP<\/constant>, <constant>GL_TEXTURE_RECTANGLE<\/constant>, and <constant>GL_TEXTURE_CUBE_MAP_ARRAY<\/constant> are accepted."
            },
            "texture": {
                "desc": "Specifies the texture object name for glGetTextureParameterfv, glGetTextureParameteriv, glGetTextureParameterIiv, and glGetTextureParameterIuiv functions."
            },
            "pname": {
                "desc": "Specifies the symbolic name of a texture parameter. <constant>GL_DEPTH_STENCIL_TEXTURE_MODE<\/constant>, <constant>GL_IMAGE_FORMAT_COMPATIBILITY_TYPE<\/constant>, <constant>GL_TEXTURE_BASE_LEVEL<\/constant>, <constant>GL_TEXTURE_BORDER_COLOR<\/constant>, <constant>GL_TEXTURE_COMPARE_MODE<\/constant>, <constant>GL_TEXTURE_COMPARE_FUNC<\/constant>, <constant>GL_TEXTURE_IMMUTABLE_FORMAT<\/constant>, <constant>GL_TEXTURE_IMMUTABLE_LEVELS<\/constant>, <constant>GL_TEXTURE_LOD_BIAS<\/constant>, <constant>GL_TEXTURE_MAG_FILTER<\/constant>, <constant>GL_TEXTURE_MAX_LEVEL<\/constant>, <constant>GL_TEXTURE_MAX_LOD<\/constant>, <constant>GL_TEXTURE_MIN_FILTER<\/constant>, <constant>GL_TEXTURE_MIN_LOD<\/constant>, <constant>GL_TEXTURE_SWIZZLE_R<\/constant>, <constant>GL_TEXTURE_SWIZZLE_G<\/constant>, <constant>GL_TEXTURE_SWIZZLE_B<\/constant>, <constant>GL_TEXTURE_SWIZZLE_A<\/constant>, <constant>GL_TEXTURE_SWIZZLE_RGBA<\/constant>, <constant>GL_TEXTURE_TARGET<\/constant>, <constant>GL_TEXTURE_VIEW_MIN_LAYER<\/constant>, <constant>GL_TEXTURE_VIEW_MIN_LEVEL<\/constant>, <constant>GL_TEXTURE_VIEW_NUM_LAYERS<\/constant>, <constant>GL_TEXTURE_VIEW_NUM_LEVELS<\/constant>, <constant>GL_TEXTURE_WRAP_S<\/constant>, <constant>GL_TEXTURE_WRAP_T<\/constant>, and <constant>GL_TEXTURE_WRAP_R<\/constant> are accepted."
            },
            "params": {
                "desc": "Returns the texture parameters."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n  "
    },
    "glCreateProgram": {
        "summary": "Creates a program object",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDrawBuffers": {
        "summary": "Specifies a list of color buffers to be drawn\n    into",
        "params": {
            "framebuffer": {
                "desc": "Specifies the name of the framebuffer object for glNamedFramebufferDrawBuffers."
            },
            "n": {
                "desc": "Specifies the number of buffers in bufs."
            },
            "bufs": {
                "desc": "Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glCreateRenderbuffers": {
        "summary": "create renderbuffer objects",
        "params": {
            "n": {
                "desc": "Number of renderbuffer objects to create."
            },
            "renderbuffers": {
                "desc": "Specifies an array in which names of the new renderbuffer objects are stored."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetSamplerParameter": {
        "summary": "return sampler parameter values",
        "params": {
            "sampler": {
                "desc": "Specifies name of the sampler object from which to retrieve parameters."
            },
            "pname": {
                "desc": "Specifies the symbolic name of a sampler parameter. <constant>GL_TEXTURE_MAG_FILTER<\/constant>, <constant>GL_TEXTURE_MIN_FILTER<\/constant>, <constant>GL_TEXTURE_MIN_LOD<\/constant>, <constant>GL_TEXTURE_MAX_LOD<\/constant>, <constant>GL_TEXTURE_LOD_BIAS<\/constant>, <constant>GL_TEXTURE_WRAP_S<\/constant>, <constant>GL_TEXTURE_WRAP_T<\/constant>, <constant>GL_TEXTURE_WRAP_R<\/constant>, <constant>GL_TEXTURE_BORDER_COLOR<\/constant>, <constant>GL_TEXTURE_COMPARE_MODE<\/constant>, and <constant>GL_TEXTURE_COMPARE_FUNC<\/constant> are accepted."
            },
            "params": {
                "desc": "Returns the sampler parameters."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glLogicOp": {
        "summary": "specify a logical pixel operation for rendering",
        "params": {
            "opcode": {
                "desc": "Specifies a symbolic constant that selects a logical operation. The following symbols are accepted: <constant>GL_CLEAR<\/constant>, <constant>GL_SET<\/constant>, <constant>GL_COPY<\/constant>, <constant>GL_COPY_INVERTED<\/constant>, <constant>GL_NOOP<\/constant>, <constant>GL_INVERT<\/constant>, <constant>GL_AND<\/constant>, <constant>GL_NAND<\/constant>, <constant>GL_OR<\/constant>, <constant>GL_NOR<\/constant>, <constant>GL_XOR<\/constant>, <constant>GL_EQUIV<\/constant>, <constant>GL_AND_REVERSE<\/constant>, <constant>GL_AND_INVERTED<\/constant>, <constant>GL_OR_REVERSE<\/constant>, and <constant>GL_OR_INVERTED<\/constant>. The initial value is <constant>GL_COPY<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glFramebufferParameteri": {
        "summary": "set a named parameter of a framebuffer object",
        "params": {
            "target": {
                "desc": "Specifies the target to which the framebuffer is bound for glFramebufferParameteri."
            },
            "framebuffer": {
                "desc": "Specifies the name of the framebuffer object for glNamedFramebufferParameteri."
            },
            "pname": {
                "desc": "Specifies the framebuffer parameter to be modified."
            },
            "param": {
                "desc": "The new value for the parameter named pname."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glSampleMaski": {
        "summary": "set the value of a sub-word of the sample mask",
        "params": {
            "maskNumber": {
                "desc": "Specifies which 32-bit sub-word of the sample mask to update."
            },
            "mask": {
                "desc": "Specifies the new value of the mask sub-word."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glTexImage1D": {
        "summary": "specify a one-dimensional texture image",
        "params": {
            "target": {
                "desc": "Specifies the target texture. Must be <constant>GL_TEXTURE_1D<\/constant> or <constant>GL_PROXY_TEXTURE_1D<\/constant>."
            },
            "level": {
                "desc": "Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image."
            },
            "internalformat": {
                "desc": "Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below."
            },
            "width": {
                "desc": "Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide. The height of the 1D texture image is 1."
            },
            "border": {
                "desc": "This value must be 0."
            },
            "format": {
                "desc": "Specifies the format of the pixel data. The following symbolic values are accepted: <constant>GL_RED<\/constant>, <constant>GL_RG<\/constant>, <constant>GL_RGB<\/constant>, <constant>GL_BGR<\/constant>, <constant>GL_RGBA<\/constant>, <constant>GL_BGRA<\/constant>, <constant>GL_RED_INTEGER<\/constant>, <constant>GL_RG_INTEGER<\/constant>, <constant>GL_RGB_INTEGER<\/constant>, <constant>GL_BGR_INTEGER<\/constant>, <constant>GL_RGBA_INTEGER<\/constant>, <constant>GL_BGRA_INTEGER<\/constant>, <constant>GL_STENCIL_INDEX<\/constant>, <constant>GL_DEPTH_COMPONENT<\/constant>, <constant>GL_DEPTH_STENCIL<\/constant>."
            },
            "type": {
                "desc": "Specifies the data type of the pixel data. The following symbolic values are accepted: <constant>GL_UNSIGNED_BYTE<\/constant>, <constant>GL_BYTE<\/constant>, <constant>GL_UNSIGNED_SHORT<\/constant>, <constant>GL_SHORT<\/constant>, <constant>GL_UNSIGNED_INT<\/constant>, <constant>GL_INT<\/constant>, <constant>GL_HALF_FLOAT<\/constant>, <constant>GL_FLOAT<\/constant>, <constant>GL_UNSIGNED_BYTE_3_3_2<\/constant>, <constant>GL_UNSIGNED_BYTE_2_3_3_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_5_6_5<\/constant>, <constant>GL_UNSIGNED_SHORT_5_6_5_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_4_4_4_4<\/constant>, <constant>GL_UNSIGNED_SHORT_4_4_4_4_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_5_5_5_1<\/constant>, <constant>GL_UNSIGNED_SHORT_1_5_5_5_REV<\/constant>, <constant>GL_UNSIGNED_INT_8_8_8_8<\/constant>, <constant>GL_UNSIGNED_INT_8_8_8_8_REV<\/constant>, <constant>GL_UNSIGNED_INT_10_10_10_2<\/constant>, and <constant>GL_UNSIGNED_INT_2_10_10_10_REV<\/constant>."
            },
            "data": {
                "desc": "Specifies a pointer to the image data in memory."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2011-2014 Khronos Group.\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glScissorIndexed": {
        "summary": "define the scissor box for a specific viewport",
        "params": {
            "index": {
                "desc": "Specifies the index of the viewport whose scissor box to modify."
            },
            "left": {
                "desc": "Specify the coordinate of the bottom left corner of the scissor box, in pixels."
            },
            "width": {
                "desc": "Specify ths dimensions of the scissor box, in pixels."
            },
            "v": {
                "desc": "For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glTexSubImage3D": {
        "summary": "specify a three-dimensional texture subimage",
        "params": {
            "target": {
                "desc": "Specifies the target to which the texture is bound for glTexSubImage3D. Must be <constant>GL_TEXTURE_3D<\/constant> or <constant>GL_TEXTURE_2D_ARRAY<\/constant>."
            },
            "texture": {
                "desc": "Specifies the texture object name for glTextureSubImage3D. The effective target of texture must be one of the valid target values above."
            },
            "level": {
                "desc": "Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image."
            },
            "xoffset": {
                "desc": "Specifies a texel offset in the x direction within the texture array."
            },
            "yoffset": {
                "desc": "Specifies a texel offset in the y direction within the texture array."
            },
            "zoffset": {
                "desc": "Specifies a texel offset in the z direction within the texture array."
            },
            "width": {
                "desc": "Specifies the width of the texture subimage."
            },
            "height": {
                "desc": "Specifies the height of the texture subimage."
            },
            "depth": {
                "desc": "Specifies the depth of the texture subimage."
            },
            "format": {
                "desc": "Specifies the format of the pixel data. The following symbolic values are accepted: <constant>GL_RED<\/constant>, <constant>GL_RG<\/constant>, <constant>GL_RGB<\/constant>, <constant>GL_BGR<\/constant>, <constant>GL_RGBA<\/constant>, <constant>GL_DEPTH_COMPONENT<\/constant>, and <constant>GL_STENCIL_INDEX<\/constant>."
            },
            "type": {
                "desc": "Specifies the data type of the pixel data. The following symbolic values are accepted: <constant>GL_UNSIGNED_BYTE<\/constant>, <constant>GL_BYTE<\/constant>, <constant>GL_UNSIGNED_SHORT<\/constant>, <constant>GL_SHORT<\/constant>, <constant>GL_UNSIGNED_INT<\/constant>, <constant>GL_INT<\/constant>, <constant>GL_FLOAT<\/constant>, <constant>GL_UNSIGNED_BYTE_3_3_2<\/constant>, <constant>GL_UNSIGNED_BYTE_2_3_3_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_5_6_5<\/constant>, <constant>GL_UNSIGNED_SHORT_5_6_5_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_4_4_4_4<\/constant>, <constant>GL_UNSIGNED_SHORT_4_4_4_4_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_5_5_5_1<\/constant>, <constant>GL_UNSIGNED_SHORT_1_5_5_5_REV<\/constant>, <constant>GL_UNSIGNED_INT_8_8_8_8<\/constant>, <constant>GL_UNSIGNED_INT_8_8_8_8_REV<\/constant>, <constant>GL_UNSIGNED_INT_10_10_10_2<\/constant>, and <constant>GL_UNSIGNED_INT_2_10_10_10_REV<\/constant>."
            },
            "pixels": {
                "desc": "Specifies a pointer to the image data in memory."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glBindBufferRange": {
        "summary": "bind a range within a buffer object to an indexed buffer target",
        "params": {
            "target": {
                "desc": "Specify the target of the bind operation. target must be one of <constant>GL_ATOMIC_COUNTER_BUFFER<\/constant>, <constant>GL_TRANSFORM_FEEDBACK_BUFFER<\/constant>, <constant>GL_UNIFORM_BUFFER<\/constant>, or <constant>GL_SHADER_STORAGE_BUFFER<\/constant>."
            },
            "index": {
                "desc": "Specify the index of the binding point within the array specified by target."
            },
            "buffer": {
                "desc": "The name of a buffer object to bind to the specified binding point."
            },
            "offset": {
                "desc": "The starting offset in basic machine units into the buffer object buffer."
            },
            "size": {
                "desc": "The amount of data in machine units that can be read from the buffer object while used as an indexed target."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDebugMessageControl": {
        "summary": "control the reporting of debug messages in a debug context",
        "params": {
            "source": {
                "desc": "The source of debug messages to enable or disable."
            },
            "type": {
                "desc": "The type of debug messages to enable or disable."
            },
            "severity": {
                "desc": "The severity of debug messages to enable or disable."
            },
            "count": {
                "desc": "The length of the array ids."
            },
            "ids": {
                "desc": "The address of an array of unsigned integers contianing the ids of the messages to enable or disable."
            },
            "enabled": {
                "desc": "A Boolean flag determining whether the selected messages should be enabled or disabled."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBindImageTexture": {
        "summary": "bind a level of a texture to an image unit",
        "params": {
            "unit": {
                "desc": "Specifies the index of the image unit to which to bind the texture"
            },
            "texture": {
                "desc": "Specifies the name of the texture to bind to the image unit."
            },
            "level": {
                "desc": "Specifies the level of the texture that is to be bound."
            },
            "layered": {
                "desc": "Specifies whether a layered texture binding is to be established."
            },
            "layer": {
                "desc": "If layered is <constant>GL_FALSE<\/constant>, specifies the layer of texture to be bound to the image unit. Ignored otherwise."
            },
            "access": {
                "desc": "Specifies a token indicating the type of access that will be performed on the image."
            },
            "format": {
                "desc": "Specifies the format that the elements of the image will be treated as for the purposes of formatted stores."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glProgramBinary": {
        "summary": "load a program object with a program binary",
        "params": {
            "program": {
                "desc": "Specifies the name of a program object into which to load a program binary."
            },
            "binaryFormat": {
                "desc": "Specifies the format of the binary data in binary."
            },
            "binary": {
                "desc": "Specifies the address an array containing the binary to be loaded into program."
            },
            "length": {
                "desc": "Specifies the number of bytes contained in binary."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetActiveAttrib": {
        "summary": "Returns information about an active attribute variable for the specified program object",
        "params": {
            "program": {
                "desc": "Specifies the program object to be queried."
            },
            "index": {
                "desc": "Specifies the index of the attribute variable to be queried."
            },
            "bufSize": {
                "desc": "Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name."
            },
            "length": {
                "desc": "Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than <constant>NULL<\/constant> is passed."
            },
            "size": {
                "desc": "Returns the size of the attribute variable."
            },
            "type": {
                "desc": "Returns the data type of the attribute variable."
            },
            "name": {
                "desc": "Returns a null terminated string containing the name of the attribute variable."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "gl_Position": {
        "summary": "contains the position of the current vertex",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDepthRangeIndexed": {
        "summary": "specify mapping of depth values from normalized device coordinates to window coordinates for a specified viewport",
        "params": {
            "index": {
                "desc": "Specifies the index of the viewport whose depth range to update."
            },
            "nearVal": {
                "desc": "Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0."
            },
            "farVal": {
                "desc": "Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glCreateShader": {
        "summary": "Creates a shader object",
        "params": {
            "shaderType": {
                "desc": "Specifies the type of shader to be created. Must be one of <constant>GL_COMPUTE_SHADER<\/constant>, <constant>GL_VERTEX_SHADER<\/constant>, <constant>GL_TESS_CONTROL_SHADER<\/constant>, <constant>GL_TESS_EVALUATION_SHADER<\/constant>, <constant>GL_GEOMETRY_SHADER<\/constant>, or <constant>GL_FRAGMENT_SHADER<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glProgramParameter": {
        "summary": "specify a parameter for a program object",
        "params": {
            "program": {
                "desc": "Specifies the name of a program object whose parameter to modify."
            },
            "pname": {
                "desc": "Specifies the name of the parameter to modify."
            },
            "value": {
                "desc": "Specifies the new value of the parameter specified by pname for program."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetProgramResourceLocation": {
        "summary": "query the location of a named resource within a program",
        "params": {
            "program": {
                "desc": "The name of a program object whose resources to query."
            },
            "programInterface": {
                "desc": "A token identifying the interface within program containing the resource named name."
            },
            "name": {
                "desc": "The name of the resource to query the location of."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBindBuffersBase": {
        "summary": "bind one or more buffer objects to a sequence of indexed buffer targets",
        "params": {
            "target": {
                "desc": "Specify the target of the bind operation. target must be one of <constant>GL_ATOMIC_COUNTER_BUFFER<\/constant>, <constant>GL_TRANSFORM_FEEDBACK_BUFFER<\/constant>, <constant>GL_UNIFORM_BUFFER<\/constant> or <constant>GL_SHADER_STORAGE_BUFFER<\/constant>."
            },
            "first": {
                "desc": "Specify the index of the first binding point within the array specified by target."
            },
            "count": {
                "desc": "Specify the number of contiguous binding points to which to bind buffers."
            },
            "buffers": {
                "desc": "A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or <constant>NULL<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glMemoryBarrier": {
        "summary": "defines a barrier ordering memory transactions",
        "params": {
            "barriers": {
                "desc": "Specifies the barriers to insert."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glPixelStore": {
        "summary": "set pixel storage modes",
        "params": {
            "pname": {
                "desc": "Specifies the symbolic name of the parameter to be set. Six values affect the packing of pixel data into memory: <constant>GL_PACK_SWAP_BYTES<\/constant>, <constant>GL_PACK_LSB_FIRST<\/constant>, <constant>GL_PACK_ROW_LENGTH<\/constant>, <constant>GL_PACK_IMAGE_HEIGHT<\/constant>, <constant>GL_PACK_SKIP_PIXELS<\/constant>, <constant>GL_PACK_SKIP_ROWS<\/constant>, <constant>GL_PACK_SKIP_IMAGES<\/constant>, and <constant>GL_PACK_ALIGNMENT<\/constant>. Six more affect the unpacking of pixel data from memory: <constant>GL_UNPACK_SWAP_BYTES<\/constant>, <constant>GL_UNPACK_LSB_FIRST<\/constant>, <constant>GL_UNPACK_ROW_LENGTH<\/constant>, <constant>GL_UNPACK_IMAGE_HEIGHT<\/constant>, <constant>GL_UNPACK_SKIP_PIXELS<\/constant>, <constant>GL_UNPACK_SKIP_ROWS<\/constant>, <constant>GL_UNPACK_SKIP_IMAGES<\/constant>, and <constant>GL_UNPACK_ALIGNMENT<\/constant>."
            },
            "param": {
                "desc": "Specifies the value that pname is set to."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glDepthMask": {
        "summary": "enable or disable writing into the depth buffer",
        "params": {
            "flag": {
                "desc": "Specifies whether the depth buffer is enabled for writing. If flag is <constant>GL_FALSE<\/constant>, depth buffer writing is disabled. Otherwise, it is enabled. Initially, depth buffer writing is enabled."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glTexStorage3DMultisample": {
        "summary": "specify storage for a two-dimensional multisample array texture",
        "params": {
            "target": {
                "desc": "Specifies the target to which the texture object is bound for glTexStorage3DMultisample. Must be one of <constant>GL_TEXTURE_2D_MULTISAMPLE_ARRAY<\/constant> or <constant>GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY<\/constant>."
            },
            "texture": {
                "desc": "Specifies the texture object name for glTextureStorage3DMultisample. The effective target of texture must be one of the valid non-proxy target values above."
            },
            "samples": {
                "desc": "Specify the number of samples in the texture."
            },
            "internalformat": {
                "desc": "Specifies the sized internal format to be used to store texture image data."
            },
            "width": {
                "desc": "Specifies the width of the texture, in texels."
            },
            "height": {
                "desc": "Specifies the height of the texture, in texels."
            },
            "depth": {
                "desc": "Specifies the depth of the texture, in layers."
            },
            "fixedsamplelocations": {
                "desc": "Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glClearDepth": {
        "summary": "specify the clear value for the depth buffer",
        "params": {
            "depth": {
                "desc": "Specifies the depth value used when the depth buffer is cleared. The initial value is 1."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glDebugMessageCallback": {
        "summary": "specify a callback to receive debugging messages from the GL",
        "params": {
            "callback": {
                "desc": "The address of a callback function that will be called when a debug message is generated."
            },
            "userParam": {
                "desc": "A user supplied pointer that will be passed on each invocation of callback."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glCompressedTexSubImage3D": {
        "summary": "specify a three-dimensional texture subimage in a compressed format",
        "params": {
            "target": {
                "desc": "Specifies the target to which the texture is bound for glCompressedTexSubImage3D function. Must be <constant>GL_TEXTURE_2D_ARRAY<\/constant>, <constant>GL_TEXTURE_3D<\/constant>, or <constant>GL_TEXTURE_CUBE_MAP_ARRAY<\/constant>."
            },
            "texture": {
                "desc": "Specifies the texture object name for glCompressedTextureSubImage3D function."
            },
            "level": {
                "desc": "Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image."
            },
            "xoffset": {
                "desc": "Specifies a texel offset in the x direction within the texture array."
            },
            "yoffset": {
                "desc": "Specifies a texel offset in the y direction within the texture array."
            },
            "width": {
                "desc": "Specifies the width of the texture subimage."
            },
            "height": {
                "desc": "Specifies the height of the texture subimage."
            },
            "depth": {
                "desc": "Specifies the depth of the texture subimage."
            },
            "format": {
                "desc": "Specifies the format of the compressed image data stored at address data."
            },
            "imageSize": {
                "desc": "Specifies the number of unsigned bytes of image data starting at the address specified by data."
            },
            "data": {
                "desc": "Specifies a pointer to the compressed image data in memory."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "gl_TessLevelOuter": {
        "summary": "contains the outer tessellation levels for the current patch",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glClientWaitSync": {
        "summary": "block and wait for a sync object to become signaled",
        "params": {
            "sync": {
                "desc": "The sync object whose status to wait on."
            },
            "flags": {
                "desc": "A bitfield controlling the command flushing behavior. flags may be <constant>GL_SYNC_FLUSH_COMMANDS_BIT<\/constant>."
            },
            "timeout": {
                "desc": "The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "gl_PointCoord": {
        "summary": "contains the coordinate of a fragment within a point",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glMultiDrawElementsBaseVertex": {
        "summary": "render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index",
        "params": {
            "mode": {
                "desc": "Specifies what kind of primitives to render. Symbolic constants <constant>GL_POINTS<\/constant>, <constant>GL_LINE_STRIP<\/constant>, <constant>GL_LINE_LOOP<\/constant>, <constant>GL_LINES<\/constant>, <constant>GL_LINE_STRIP_ADJACENCY<\/constant>, <constant>GL_LINES_ADJACENCY<\/constant>, <constant>GL_TRIANGLE_STRIP<\/constant>, <constant>GL_TRIANGLE_FAN<\/constant>, <constant>GL_TRIANGLES<\/constant>, <constant>GL_TRIANGLE_STRIP_ADJACENCY<\/constant>, <constant>GL_TRIANGLES_ADJACENCY<\/constant> and <constant>GL_PATCHES<\/constant> are accepted."
            },
            "count": {
                "desc": "Points to an array of the elements counts."
            },
            "type": {
                "desc": "Specifies the type of the values in indices. Must be one of <constant>GL_UNSIGNED_BYTE<\/constant>, <constant>GL_UNSIGNED_SHORT<\/constant>, or <constant>GL_UNSIGNED_INT<\/constant>."
            },
            "indices": {
                "desc": "Specifies a pointer to the location where the indices are stored."
            },
            "drawcount": {
                "desc": "Specifies the size of the count, indices and basevertex arrays."
            },
            "basevertex": {
                "desc": "Specifies a pointer to the location where the base vertices are stored."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetDebugMessageLog": {
        "summary": "retrieve messages from the debug message log",
        "params": {
            "count": {
                "desc": "The number of debug messages to retrieve from the log."
            },
            "bufSize": {
                "desc": "The size of the buffer whose address is given by messageLog."
            },
            "sources": {
                "desc": "The address of an array of variables to receive the sources of the retrieved messages."
            },
            "types": {
                "desc": "The address of an array of variables to receive the types of the retrieved messages."
            },
            "ids": {
                "desc": "The address of an array of unsigned integers to receive the ids of the retrieved messages."
            },
            "severities": {
                "desc": "The address of an array of variables to receive the severites of the retrieved messages."
            },
            "lengths": {
                "desc": "The address of an array of variables to receive the lengths of the received messages."
            },
            "messageLog": {
                "desc": "The address of an array of characters that will receive the messages."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glPatchParameter": {
        "summary": "specifies the parameters for patch primitives",
        "params": {
            "pname": {
                "desc": "Specifies the name of the parameter to set. The symbolc constants <constant>GL_PATCH_VERTICES<\/constant>, <constant>GL_PATCH_DEFAULT_OUTER_LEVEL<\/constant>, and <constant>GL_PATCH_DEFAULT_INNER_LEVEL<\/constant> are accepted."
            },
            "value": {
                "desc": "Specifies the new value for the parameter given by pname."
            },
            "values": {
                "desc": "Specifies the address of an array containing the new values for the parameter given by pname."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glRenderbufferStorage": {
        "summary": "establish data storage, format and dimensions of a\n    renderbuffer object's image",
        "params": {
            "target": {
                "desc": "Specifies a binding target of the allocation for glRenderbufferStorage function. Must be <constant>GL_RENDERBUFFER<\/constant>."
            },
            "renderbuffer": {
                "desc": "Specifies the name of the renderbuffer object for glNamedRenderbufferStorage function."
            },
            "internalformat": {
                "desc": "Specifies the internal format to use for the renderbuffer object's image."
            },
            "width": {
                "desc": "Specifies the width of the renderbuffer, in pixels."
            },
            "height": {
                "desc": "Specifies the height of the renderbuffer, in pixels."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glVertexAttrib": {
        "summary": "Specifies the value of a generic vertex attribute",
        "params": {
            "index": {
                "desc": "Specifies the index of the generic vertex attribute to be modified."
            },
            "\n            v0,\n            v1,\n            v2,\n            v3\n        ": {
                "desc": "For the scalar commands, specifies the new values to be used for the specified vertex attribute."
            },
            "v": {
                "desc": "For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute."
            },
            "type": {
                "desc": "For the packed commands (glVertexAttribP*), specified the type of packing used on the data. This parameter must be <constant>GL_INT_2_10_10_10_REV<\/constant> or <constant>GL_UNSIGNED_INT_2_10_10_10_REV<\/constant>, to specify signed or unsigned data, respectively, or <constant>GL_UNSIGNED_INT_10F_11F_11F_REV<\/constant> to specify floating point data."
            },
            "normalized": {
                "desc": "For the packed commands, if <constant>GL_TRUE<\/constant>, then the values are to be converted to floating point values by normalizing. Otherwise, they are converted directly to floating-point values. If type indicates a floating-pont format, then normalized value must be <constant>GL_FALSE<\/constant>."
            },
            "value": {
                "desc": "For the packed commands, specifies the new packed value to be used for the specified vertex attribute."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glIsTransformFeedback": {
        "summary": "determine if a name corresponds to a transform feedback object",
        "params": {
            "id": {
                "desc": "Specifies a value that may be the name of a transform feedback object."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetFragDataLocation": {
        "summary": "query the bindings of color numbers to user-defined varying out variables",
        "params": {
            "program": {
                "desc": "The name of the program containing varying out variable whose binding to query"
            },
            "name": {
                "desc": "The name of the user-defined varying out variable whose binding to query"
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glShaderBinary": {
        "summary": "load pre-compiled shader binaries",
        "params": {
            "count": {
                "desc": "Specifies the number of shader object handles contained in shaders."
            },
            "shaders": {
                "desc": "Specifies the address of an array of shader handles into which to load pre-compiled shader binaries."
            },
            "binaryFormat": {
                "desc": "Specifies the format of the shader binaries contained in binary."
            },
            "binary": {
                "desc": "Specifies the address of an array of bytes containing pre-compiled binary shader code."
            },
            "length": {
                "desc": "Specifies the length of the array whose address is given in binary."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glEnable": {
        "summary": "enable or disable server-side GL capabilities",
        "params": {
            "cap": {
                "desc": "Specifies a symbolic constant indicating a GL capability."
            },
            "index": {
                "desc": "Specifies the index of the switch to disable (for glEnablei and glDisablei only)."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2011-2014 Khronos Group.\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glUnmapBuffer": {
        "summary": "release the mapping of a buffer object's data store into the client's address space",
        "params": {
            "target": {
                "desc": "Specifies the target to which the buffer object is bound for glUnmapBuffer, which must be one of the buffer binding targets in the following table:"
            },
            "buffer": {
                "desc": "Specifies the name of the buffer object for glUnmapNamedBuffer."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2005 Addison-Wesley.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glVertexAttribPointer": {
        "summary": "define an array of generic vertex attribute data",
        "params": {
            "index": {
                "desc": "Specifies the index of the generic vertex attribute to be modified."
            },
            "size": {
                "desc": "Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant <constant>GL_BGRA<\/constant> is accepted by glVertexAttribPointer. The initial value is 4."
            },
            "type": {
                "desc": "Specifies the data type of each component in the array. The symbolic constants <constant>GL_BYTE<\/constant>, <constant>GL_UNSIGNED_BYTE<\/constant>, <constant>GL_SHORT<\/constant>, <constant>GL_UNSIGNED_SHORT<\/constant>, <constant>GL_INT<\/constant>, and <constant>GL_UNSIGNED_INT<\/constant> are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally <constant>GL_HALF_FLOAT<\/constant>, <constant>GL_FLOAT<\/constant>, <constant>GL_DOUBLE<\/constant>, <constant>GL_FIXED<\/constant>, <constant>GL_INT_2_10_10_10_REV<\/constant>, <constant>GL_UNSIGNED_INT_2_10_10_10_REV<\/constant> and <constant>GL_UNSIGNED_INT_10F_11F_11F_REV<\/constant> are accepted by glVertexAttribPointer. <constant>GL_DOUBLE<\/constant> is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is <constant>GL_FLOAT<\/constant>."
            },
            "normalized": {
                "desc": "For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (<constant>GL_TRUE<\/constant>) or converted directly as fixed-point values (<constant>GL_FALSE<\/constant>) when they are accessed."
            },
            "stride": {
                "desc": "Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0."
            },
            "pointer": {
                "desc": "Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the <constant>GL_ARRAY_BUFFER<\/constant> target. The initial value is 0."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetShaderSource": {
        "summary": "Returns the source code string from a shader object",
        "params": {
            "shader": {
                "desc": "Specifies the shader object to be queried."
            },
            "bufSize": {
                "desc": "Specifies the size of the character buffer for storing the returned source code string."
            },
            "length": {
                "desc": "Returns the length of the string returned in source (excluding the null terminator)."
            },
            "source": {
                "desc": "Specifies an array of characters that is used to return the source code string."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glInvalidateFramebuffer": {
        "summary": "invalidate the content of some or all of a framebuffer's attachments",
        "params": {
            "target": {
                "desc": "Specifies the target to which the framebuffer object is attached for glInvalidateFramebuffer."
            },
            "framebuffer": {
                "desc": "Specifies the name of the framebuffer object for glInvalidateNamedFramebufferData."
            },
            "numAttachments": {
                "desc": "Specifies the number of entries in the attachments array."
            },
            "attachments": {
                "desc": "Specifies a pointer to an array identifying the attachments to be invalidated."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glClearTexImage": {
        "summary": "fills all a texture image with a constant value",
        "params": {
            "texture": {
                "desc": "The name of an existing texture object containing the image to be cleared."
            },
            "level": {
                "desc": "The level of texture containing the region to be cleared."
            },
            "format": {
                "desc": "The format of the data whose address in memory is given by data."
            },
            "type": {
                "desc": "The type of the data whose address in memory is given by data."
            },
            "data": {
                "desc": "The address in memory of the data to be used to clear the specified region."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glPauseTransformFeedback": {
        "summary": "pause transform feedback operations",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glStencilMaskSeparate": {
        "summary": "control the front and\/or back writing of individual bits in the stencil planes",
        "params": {
            "face": {
                "desc": "Specifies whether the front and\/or back stencil writemask is updated. Three symbolic constants are valid: <constant>GL_FRONT<\/constant>, <constant>GL_BACK<\/constant>, and <constant>GL_FRONT_AND_BACK<\/constant>."
            },
            "mask": {
                "desc": "Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2006 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGenBuffers": {
        "summary": "generate buffer object names",
        "params": {
            "n": {
                "desc": "Specifies the number of buffer object names to be generated."
            },
            "buffers": {
                "desc": "Specifies an array in which the generated buffer object names are stored."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2005 Addison-Wesley.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glMinSampleShading": {
        "summary": "specifies minimum rate at which sample shading takes place",
        "params": {
            "value": {
                "desc": "Specifies the rate at which samples are shaded within each covered pixel."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetActiveUniformBlockName": {
        "summary": "retrieve the name of an active uniform block",
        "params": {
            "program": {
                "desc": "Specifies the name of a program containing the uniform block."
            },
            "uniformBlockIndex": {
                "desc": "Specifies the index of the uniform block within program."
            },
            "bufSize": {
                "desc": "Specifies the size of the buffer addressed by uniformBlockName."
            },
            "length": {
                "desc": "Specifies the address of a variable to receive the number of characters that were written to uniformBlockName."
            },
            "uniformBlockName": {
                "desc": "Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glValidateProgramPipeline": {
        "summary": "validate a program pipeline object against current GL state",
        "params": {
            "pipeline": {
                "desc": "Specifies the name of a program pipeline object to validate."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glClear": {
        "summary": "clear buffers to preset values",
        "params": {
            "mask": {
                "desc": "Bitwise OR of masks that indicate the buffers to be cleared. The three masks are <constant>GL_COLOR_BUFFER_BIT<\/constant>, <constant>GL_DEPTH_BUFFER_BIT<\/constant>, and <constant>GL_STENCIL_BUFFER_BIT<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glGetBufferParameteriv": {
        "summary": "return parameters of a buffer object",
        "params": {
            "target": {
                "desc": "Specifies the target to which the buffer object is bound for glGetBufferParameteriv and glGetBufferParameteri64v. Must be one of the buffer binding targets in the following table:"
            },
            "buffer": {
                "desc": "Specifies the name of the buffer object for glGetNamedBufferParameteriv and glGetNamedBufferParameteri64v."
            },
            "value": {
                "desc": "Specifies the name of the buffer object parameter to query."
            },
            "data": {
                "desc": "Returns the requested parameter."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2005 Addison-Wesley.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glObjectPtrLabel": {
        "summary": "label a sync object identified by a pointer",
        "params": {
            "ptr": {
                "desc": "A pointer identifying a sync object."
            },
            "length": {
                "desc": "The length of the label to be used for the object."
            },
            "label": {
                "desc": "The address of a string containing the label to assign to the object."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glScissor": {
        "summary": "define the scissor box",
        "params": {
            "x": {
                "desc": "Specify the lower left corner of the scissor box. Initially (0, 0)."
            },
            "width": {
                "desc": "Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glClearStencil": {
        "summary": "specify the clear value for the stencil buffer",
        "params": {
            "s": {
                "desc": "Specifies the index used when the stencil buffer is cleared. The initial value is 0."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glDrawArraysInstancedBaseInstance": {
        "summary": "draw multiple instances of a range of elements with offset applied to instanced attributes",
        "params": {
            "mode": {
                "desc": "Specifies what kind of primitives to render. Symbolic constants <constant>GL_POINTS<\/constant>, <constant>GL_LINE_STRIP<\/constant>, <constant>GL_LINE_LOOP<\/constant>, <constant>GL_LINES<\/constant>, <constant>GL_TRIANGLE_STRIP<\/constant>, <constant>GL_TRIANGLE_FAN<\/constant>, <constant>GL_TRIANGLES<\/constant> <constant>GL_LINES_ADJACENCY<\/constant>, <constant>GL_LINE_STRIP_ADJACENCY<\/constant>, <constant>GL_TRIANGLES_ADJACENCY<\/constant>, <constant>GL_TRIANGLE_STRIP_ADJACENCY<\/constant> and <constant>GL_PATCHES<\/constant> are accepted."
            },
            "first": {
                "desc": "Specifies the starting index in the enabled arrays."
            },
            "count": {
                "desc": "Specifies the number of indices to be rendered."
            },
            "instancecount": {
                "desc": "Specifies the number of instances of the specified range of indices to be rendered."
            },
            "baseinstance": {
                "desc": "Specifies the base instance for use in fetching instanced vertex attributes."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glCompressedTexSubImage2D": {
        "summary": "specify a two-dimensional texture subimage in a compressed format",
        "params": {
            "target": {
                "desc": "Specifies the target to which the texture is bound for glCompressedTexSubImage2D function. Must be <constant>GL_TEXTURE_1D_ARRAY<\/constant>, <constant>GL_TEXTURE_2D<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_X<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_X<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_Y<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_Y<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_Z<\/constant>, or <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_Z<\/constant>."
            },
            "texture": {
                "desc": "Specifies the texture object name for glCompressedTextureSubImage2D function."
            },
            "level": {
                "desc": "Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image."
            },
            "xoffset": {
                "desc": "Specifies a texel offset in the x direction within the texture array."
            },
            "yoffset": {
                "desc": "Specifies a texel offset in the y direction within the texture array."
            },
            "width": {
                "desc": "Specifies the width of the texture subimage."
            },
            "height": {
                "desc": "Specifies the height of the texture subimage."
            },
            "format": {
                "desc": "Specifies the format of the compressed image data stored at address data."
            },
            "imageSize": {
                "desc": "Specifies the number of unsigned bytes of image data starting at the address specified by data."
            },
            "data": {
                "desc": "Specifies a pointer to the compressed image data in memory."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glGetSubroutineIndex": {
        "summary": "retrieve the index of a subroutine uniform of a given shader stage within a program",
        "params": {
            "program": {
                "desc": "Specifies the name of the program containing shader stage."
            },
            "shadertype": {
                "desc": "Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of <constant>GL_VERTEX_SHADER<\/constant>, <constant>GL_TESS_CONTROL_SHADER<\/constant>, <constant>GL_TESS_EVALUATION_SHADER<\/constant>, <constant>GL_GEOMETRY_SHADER<\/constant> or <constant>GL_FRAGMENT_SHADER<\/constant>."
            },
            "name": {
                "desc": "Specifies the name of the subroutine uniform whose index to query."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDepthFunc": {
        "summary": "specify the value used for depth buffer comparisons",
        "params": {
            "func": {
                "desc": "Specifies the depth comparison function. Symbolic constants <constant>GL_NEVER<\/constant>, <constant>GL_LESS<\/constant>, <constant>GL_EQUAL<\/constant>, <constant>GL_LEQUAL<\/constant>, <constant>GL_GREATER<\/constant>, <constant>GL_NOTEQUAL<\/constant>, <constant>GL_GEQUAL<\/constant>, and <constant>GL_ALWAYS<\/constant> are accepted. The initial value is <constant>GL_LESS<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glTransformFeedbackVaryings": {
        "summary": "specify values to record in transform feedback buffers",
        "params": {
            "program": {
                "desc": "The name of the target program object."
            },
            "count": {
                "desc": "The number of varying variables used for transform feedback."
            },
            "varyings": {
                "desc": "An array of count zero-terminated strings specifying the names of the varying variables to use for transform feedback."
            },
            "bufferMode": {
                "desc": "Identifies the mode used to capture the varying variables when transform feedback is active. bufferMode must be <constant>GL_INTERLEAVED_ATTRIBS<\/constant> or <constant>GL_SEPARATE_ATTRIBS<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetBufferSubData": {
        "summary": "returns a subset of a buffer object's data store",
        "params": {
            "target": {
                "desc": "Specifies the target to which the buffer object is bound for glGetBufferSubData, which must be one of the buffer binding targets in the following table:"
            },
            "buffer": {
                "desc": "Specifies the name of the buffer object for glGetNamedBufferSubData."
            },
            "offset": {
                "desc": "Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes."
            },
            "size": {
                "desc": "Specifies the size in bytes of the data store region being returned."
            },
            "data": {
                "desc": "Specifies a pointer to the location where buffer object data is returned."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2005 Addison-Wesley.\n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "gl_VertexID": {
        "summary": "contains the index of the current vertex",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glCopyTexImage2D": {
        "summary": "copy pixels into a 2D texture image",
        "params": {
            "target": {
                "desc": "Specifies the target texture. Must be <constant>GL_TEXTURE_2D<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_X<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_X<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_Y<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_Y<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_Z<\/constant>, or <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_Z<\/constant>."
            },
            "level": {
                "desc": "Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image."
            },
            "internalformat": {
                "desc": "Specifies the internal format of the texture. Must be one of the following symbolic constants: <constant>GL_COMPRESSED_RED<\/constant>, <constant>GL_COMPRESSED_RG<\/constant>, <constant>GL_COMPRESSED_RGB<\/constant>, <constant>GL_COMPRESSED_RGBA<\/constant>. <constant>GL_COMPRESSED_SRGB<\/constant>, <constant>GL_COMPRESSED_SRGB_ALPHA<\/constant>. <constant>GL_DEPTH_COMPONENT<\/constant>, <constant>GL_DEPTH_COMPONENT16<\/constant>, <constant>GL_DEPTH_COMPONENT24<\/constant>, <constant>GL_DEPTH_COMPONENT32<\/constant>, <constant>GL_STENCIL_INDEX8<\/constant>, <constant>GL_RED<\/constant>, <constant>GL_RG<\/constant>, <constant>GL_RGB<\/constant>, <constant>GL_R3_G3_B2<\/constant>, <constant>GL_RGB4<\/constant>, <constant>GL_RGB5<\/constant>, <constant>GL_RGB8<\/constant>, <constant>GL_RGB10<\/constant>, <constant>GL_RGB12<\/constant>, <constant>GL_RGB16<\/constant>, <constant>GL_RGBA<\/constant>, <constant>GL_RGBA2<\/constant>, <constant>GL_RGBA4<\/constant>, <constant>GL_RGB5_A1<\/constant>, <constant>GL_RGBA8<\/constant>, <constant>GL_RGB10_A2<\/constant>, <constant>GL_RGBA12<\/constant>, <constant>GL_RGBA16<\/constant>, <constant>GL_SRGB<\/constant>, <constant>GL_SRGB8<\/constant>, <constant>GL_SRGB_ALPHA<\/constant>, or <constant>GL_SRGB8_ALPHA8<\/constant>."
            },
            "x": {
                "desc": "Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied."
            },
            "width": {
                "desc": "Specifies the width of the texture image."
            },
            "height": {
                "desc": "Specifies the height of the texture image."
            },
            "border": {
                "desc": "Must be 0."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006\n            Silicon Graphics, Inc.\n            Copyright  2012-2014 Khronos Group.\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glIsQuery": {
        "summary": "determine if a name corresponds to a query object",
        "params": {
            "id": {
                "desc": "Specifies a value that may be the name of a query object."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2005 Addison-Wesley.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDispatchCompute": {
        "summary": "launch one or more compute work groups",
        "params": {
            "num_groups_x": {
                "desc": "The number of work groups to be launched in the X dimension."
            },
            "num_groups_y": {
                "desc": "The number of work groups to be launched in the Y dimension."
            },
            "num_groups_z": {
                "desc": "The number of work groups to be launched in the Z dimension."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glSamplerParameter": {
        "summary": "set sampler parameters",
        "params": {
            "sampler": {
                "desc": "Specifies the sampler object whose parameter to modify."
            },
            "pname": {
                "desc": "Specifies the symbolic name of a sampler parameter. pname can be one of the following: <constant>GL_TEXTURE_WRAP_S<\/constant>, <constant>GL_TEXTURE_WRAP_T<\/constant>, <constant>GL_TEXTURE_WRAP_R<\/constant>, <constant>GL_TEXTURE_MIN_FILTER<\/constant>, <constant>GL_TEXTURE_MAG_FILTER<\/constant>, <constant>GL_TEXTURE_BORDER_COLOR<\/constant>, <constant>GL_TEXTURE_MIN_LOD<\/constant>, <constant>GL_TEXTURE_MAX_LOD<\/constant>, <constant>GL_TEXTURE_LOD_BIAS<\/constant> <constant>GL_TEXTURE_COMPARE_MODE<\/constant>, or <constant>GL_TEXTURE_COMPARE_FUNC<\/constant>."
            },
            "param": {
                "desc": "For the scalar commands, specifies the value of pname."
            },
            "params": {
                "desc": "For the vector commands (glSamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBindVertexBuffers": {
        "summary": "attach multiple buffer objects to a vertex array object",
        "params": {
            "vaobj": {
                "desc": "Specifies the name of the vertex array object for glVertexArrayVertexBuffers."
            },
            "first": {
                "desc": "Specifies the first vertex buffer binding point to which a buffer object is to be bound."
            },
            "count": {
                "desc": "Specifies the number of buffers to bind."
            },
            "buffers": {
                "desc": "Specifies the address of an array of strides to associate with the binding points."
            },
            "offsets": {
                "desc": "Specifies the address of an array of offsets to associate with the binding points."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glFramebufferRenderbuffer": {
        "summary": "attach a renderbuffer as a logical buffer of a framebuffer object",
        "params": {
            "target": {
                "desc": "Specifies the target to which the framebuffer is bound for glFramebufferRenderbuffer."
            },
            "framebuffer": {
                "desc": "Specifies the name of the framebuffer object for glNamedFramebufferRenderbuffer."
            },
            "attachment": {
                "desc": "Specifies the attachment point of the framebuffer."
            },
            "renderbuffertarget": {
                "desc": "Specifies the renderbuffer target. Must be <constant>GL_RENDERBUFFER<\/constant>."
            },
            "renderbuffer": {
                "desc": "Specifies the name of an existing renderbuffer object of type renderbuffertarget to attach."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glTexSubImage2D": {
        "summary": "specify a two-dimensional texture subimage",
        "params": {
            "target": {
                "desc": "Specifies the target to which the texture is bound for glTexSubImage2D. Must be <constant>GL_TEXTURE_2D<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_X<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_X<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_Y<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_Y<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_Z<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_Z<\/constant>, or <constant>GL_TEXTURE_1D_ARRAY<\/constant>."
            },
            "texture": {
                "desc": "Specifies the texture object name for glTextureSubImage2D. The effective target of texture must be one of the valid target values above."
            },
            "level": {
                "desc": "Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image."
            },
            "xoffset": {
                "desc": "Specifies a texel offset in the x direction within the texture array."
            },
            "yoffset": {
                "desc": "Specifies a texel offset in the y direction within the texture array."
            },
            "width": {
                "desc": "Specifies the width of the texture subimage."
            },
            "height": {
                "desc": "Specifies the height of the texture subimage."
            },
            "format": {
                "desc": "Specifies the format of the pixel data. The following symbolic values are accepted: <constant>GL_RED<\/constant>, <constant>GL_RG<\/constant>, <constant>GL_RGB<\/constant>, <constant>GL_BGR<\/constant>, <constant>GL_RGBA<\/constant>, <constant>GL_BGRA<\/constant>, <constant>GL_DEPTH_COMPONENT<\/constant>, and <constant>GL_STENCIL_INDEX<\/constant>."
            },
            "type": {
                "desc": "Specifies the data type of the pixel data. The following symbolic values are accepted: <constant>GL_UNSIGNED_BYTE<\/constant>, <constant>GL_BYTE<\/constant>, <constant>GL_UNSIGNED_SHORT<\/constant>, <constant>GL_SHORT<\/constant>, <constant>GL_UNSIGNED_INT<\/constant>, <constant>GL_INT<\/constant>, <constant>GL_FLOAT<\/constant>, <constant>GL_UNSIGNED_BYTE_3_3_2<\/constant>, <constant>GL_UNSIGNED_BYTE_2_3_3_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_5_6_5<\/constant>, <constant>GL_UNSIGNED_SHORT_5_6_5_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_4_4_4_4<\/constant>, <constant>GL_UNSIGNED_SHORT_4_4_4_4_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_5_5_5_1<\/constant>, <constant>GL_UNSIGNED_SHORT_1_5_5_5_REV<\/constant>, <constant>GL_UNSIGNED_INT_8_8_8_8<\/constant>, <constant>GL_UNSIGNED_INT_8_8_8_8_REV<\/constant>, <constant>GL_UNSIGNED_INT_10_10_10_2<\/constant>, and <constant>GL_UNSIGNED_INT_2_10_10_10_REV<\/constant>."
            },
            "pixels": {
                "desc": "Specifies a pointer to the image data in memory."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glCompressedTexImage1D": {
        "summary": "specify a one-dimensional texture image in a compressed format",
        "params": {
            "target": {
                "desc": "Specifies the target texture. Must be <constant>GL_TEXTURE_1D<\/constant> or <constant>GL_PROXY_TEXTURE_1D<\/constant>."
            },
            "level": {
                "desc": "Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image."
            },
            "internalformat": {
                "desc": "Specifies the format of the compressed image data stored at address data."
            },
            "width": {
                "desc": "Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1."
            },
            "border": {
                "desc": "This value must be 0."
            },
            "imageSize": {
                "desc": "Specifies the number of unsigned bytes of image data starting at the address specified by data."
            },
            "data": {
                "desc": "Specifies a pointer to the compressed image data in memory."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2011-2014 Khronos Group.\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glPointParameter": {
        "summary": "specify point parameters",
        "params": {
            "pname": {
                "desc": "Specifies a single-valued point parameter. <constant>GL_POINT_FADE_THRESHOLD_SIZE<\/constant>, and <constant>GL_POINT_SPRITE_COORD_ORIGIN<\/constant> are accepted."
            },
            "param": {
                "desc": "For glPointParameterf and glPointParameteri, specifies the value that pname will be set to."
            },
            "params": {
                "desc": "For glPointParameterfv and glPointParameteriv, specifies a pointer to an array where the value or values to be assigned to pname are stored."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glVertexAttribFormat": {
        "summary": "specify the organization of vertex arrays",
        "params": {
            "vaobj": {
                "desc": "Specifies the name of the vertex array object for glVertexArrayAttrib{I, L}Format functions."
            },
            "attribindex": {
                "desc": "The generic vertex attribute array being described."
            },
            "size": {
                "desc": "The number of values per vertex that are stored in the array."
            },
            "type": {
                "desc": "The type of the data stored in the array."
            },
            "normalized": {
                "desc": "Specifies whether fixed-point data values should be normalized (<constant>GL_TRUE<\/constant>) or converted directly as fixed-point values (<constant>GL_FALSE<\/constant>) when they are accessed. This parameter is ignored if type is <constant>GL_FIXED<\/constant>."
            },
            "relativeoffset": {
                "desc": "The distance between elements within the buffer."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetFramebufferAttachmentParameteriv": {
        "summary": "retrieve information about attachments of a framebuffer object",
        "params": {
            "target": {
                "desc": "Specifies the target to which the framebuffer object is bound for glGetFramebufferAttachmentParameteriv."
            },
            "framebuffer": {
                "desc": "Specifies the name of the framebuffer object for glGetNamedFramebufferAttachmentParameteriv."
            },
            "attachment": {
                "desc": "Specifies the attachment of the framebuffer object to query."
            },
            "pname": {
                "desc": "Specifies the parameter of attachment to query."
            },
            "params": {
                "desc": "Returns the value of parameter pname for attachment."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glTransformFeedbackBufferRange": {
        "summary": "bind a range within a buffer object to a transform feedback buffer object",
        "params": {
            "xfb": {
                "desc": "Name of the transform feedback buffer object."
            },
            "index": {
                "desc": "Index of the binding point within xfb."
            },
            "buffer": {
                "desc": "Name of the buffer object to bind to the specified binding point."
            },
            "offset": {
                "desc": "The starting offset in basic machine units into the buffer object."
            },
            "size": {
                "desc": "The amount of data in basic machine units that can be read from or written to the buffer object while used as an indexed target."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glCopyTexSubImage3D": {
        "summary": "copy a three-dimensional texture subimage",
        "params": {
            "target": {
                "desc": "Specifies the target to which the texture object is bound for glCopyTexSubImage3D function. Must be <constant>GL_TEXTURE_3D<\/constant>, <constant>GL_TEXTURE_2D_ARRAY<\/constant> or <constant>GL_TEXTURE_CUBE_MAP_ARRAY<\/constant>."
            },
            "texture": {
                "desc": "Specifies the texture object name for glCopyTextureSubImage3D function."
            },
            "level": {
                "desc": "Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image."
            },
            "xoffset": {
                "desc": "Specifies a texel offset in the x direction within the texture array."
            },
            "yoffset": {
                "desc": "Specifies a texel offset in the y direction within the texture array."
            },
            "zoffset": {
                "desc": "Specifies a texel offset in the z direction within the texture array."
            },
            "x": {
                "desc": "Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied."
            },
            "width": {
                "desc": "Specifies the width of the texture subimage."
            },
            "height": {
                "desc": "Specifies the height of the texture subimage."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006\n            Silicon Graphics, Inc.\n            Copyright  2012-2014 Khronos Group.\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glInvalidateBufferSubData": {
        "summary": "invalidate a region of a buffer object's data store",
        "params": {
            "buffer": {
                "desc": "The name of a buffer object, a subrange of whose data store to invalidate."
            },
            "offset": {
                "desc": "The offset within the buffer's data store of the start of the range to be invalidated."
            },
            "length": {
                "desc": "The length of the range within the buffer's data store to be invalidated."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetProgramResourceIndex": {
        "summary": "query the index of a named resource within a program",
        "params": {
            "program": {
                "desc": "The name of a program object whose resources to query."
            },
            "programInterface": {
                "desc": "A token identifying the interface within program containing the resource named name."
            },
            "name": {
                "desc": "The name of the resource to query the index of."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glIsBuffer": {
        "summary": "determine if a name corresponds to a buffer object",
        "params": {
            "buffer": {
                "desc": "Specifies a value that may be the name of a buffer object."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2005 Addison-Wesley.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGenTransformFeedbacks": {
        "summary": "reserve transform feedback object names",
        "params": {
            "n": {
                "desc": "Specifies the number of transform feedback object names to reserve."
            },
            "ids": {
                "desc": "Specifies an array of into which the reserved names will be written."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glIsShader": {
        "summary": "Determines if a name corresponds to a shader object",
        "params": {
            "shader": {
                "desc": "Specifies a potential shader object."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "gl_FrontFacing": {
        "summary": "indicates whether a primitive is front or back facing",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glPrimitiveRestartIndex": {
        "summary": "specify the primitive restart index",
        "params": {
            "index": {
                "desc": "Specifies the value to be interpreted as the primitive restart index."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glMapBufferRange": {
        "summary": "map all or part of a buffer object's data store into the client's address space",
        "params": {
            "target": {
                "desc": "Specifies the target to which the buffer object is bound for glMapBufferRange, which must be one of the buffer binding targets in the following table:"
            },
            "buffer": {
                "desc": "Specifies the name of the buffer object for glMapNamedBufferRange."
            },
            "offset": {
                "desc": "Specifies the starting offset within the buffer of the range to be mapped."
            },
            "length": {
                "desc": "Specifies the length of the range to be mapped."
            },
            "access": {
                "desc": "Specifies a combination of access flags indicating the desired access to the mapped range."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glViewportIndexed": {
        "summary": "set a specified viewport",
        "params": {
            "index": {
                "desc": "Specify the first viewport to set."
            },
            "x": {
                "desc": "For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0)."
            },
            "w": {
                "desc": "For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, w and h are set to the dimensions of that window."
            },
            "v": {
                "desc": "For glViewportIndexedfv, specifies the address of an array containing the viewport parameters."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "gl_LocalInvocationIndex": {
        "summary": "contains the local linear index of work item currently being operated on by a compute shader",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glFlush": {
        "summary": "force execution of GL commands in finite time",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glBeginTransformFeedback": {
        "summary": "start transform feedback operation",
        "params": {
            "primitiveMode": {
                "desc": "Specify the output type of the primitives that will be recorded into the buffer objects that are bound for transform feedback."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBindBuffersRange": {
        "summary": "bind ranges of one or more buffer objects to a sequence of indexed buffer targets",
        "params": {
            "target": {
                "desc": "Specify the target of the bind operation. target must be one of <constant>GL_ATOMIC_COUNTER_BUFFER<\/constant>, <constant>GL_TRANSFORM_FEEDBACK_BUFFER<\/constant>, <constant>GL_UNIFORM_BUFFER<\/constant> or <constant>GL_SHADER_STORAGE_BUFFER<\/constant>."
            },
            "first": {
                "desc": "Specify the index of the first binding point within the array specified by target."
            },
            "count": {
                "desc": "Specify the number of contiguous binding points to which to bind buffers."
            },
            "buffers": {
                "desc": "A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or <constant>NULL<\/constant>."
            },
            "offsets": {
                "desc": "A pointer to an array of offsets into the corresponding buffer in buffers to bind, or <constant>NULL<\/constant> if buffers is <constant>NULL<\/constant>."
            },
            "sizes": {
                "desc": "A pointer to an array of sizes of the corresponding buffer in buffers to bind, or <constant>NULL<\/constant> if buffers is <constant>NULL<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glCompressedTexImage2D": {
        "summary": "specify a two-dimensional texture image in a compressed format",
        "params": {
            "target": {
                "desc": "Specifies the target texture. Must be <constant>GL_TEXTURE_2D<\/constant>, <constant>GL_PROXY_TEXTURE_2D<\/constant>, <constant>GL_TEXTURE_1D_ARRAY<\/constant>, <constant>GL_PROXY_TEXTURE_1D_ARRAY<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_X<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_X<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_Y<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_Y<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_Z<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_Z<\/constant>, or <constant>GL_PROXY_TEXTURE_CUBE_MAP<\/constant>."
            },
            "level": {
                "desc": "Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image."
            },
            "internalformat": {
                "desc": "Specifies the format of the compressed image data stored at address data."
            },
            "width": {
                "desc": "Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide."
            },
            "height": {
                "desc": "Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high."
            },
            "border": {
                "desc": "This value must be 0."
            },
            "imageSize": {
                "desc": "Specifies the number of unsigned bytes of image data starting at the address specified by data."
            },
            "data": {
                "desc": "Specifies a pointer to the compressed image data in memory."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2011-2014 Khronos Group.\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glGetString": {
        "summary": "return a string describing the current GL connection",
        "params": {
            "name": {
                "desc": "Specifies a symbolic constant, one of <constant>GL_VENDOR<\/constant>, <constant>GL_RENDERER<\/constant>, <constant>GL_VERSION<\/constant>, or <constant>GL_SHADING_LANGUAGE_VERSION<\/constant>. Additionally, glGetStringi accepts the <constant>GL_EXTENSIONS<\/constant> token."
            },
            "index": {
                "desc": "For glGetStringi, specifies the index of the string to return."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glTexSubImage1D": {
        "summary": "specify a one-dimensional texture subimage",
        "params": {
            "target": {
                "desc": "Specifies the target to which the texture is bound for glTexSubImage1D. Must be <constant>GL_TEXTURE_1D<\/constant>."
            },
            "texture": {
                "desc": "Specifies the texture object name for glTextureSubImage1D. The effective target of texture must be one of the valid target values above."
            },
            "level": {
                "desc": "Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image."
            },
            "xoffset": {
                "desc": "Specifies a texel offset in the x direction within the texture array."
            },
            "width": {
                "desc": "Specifies the width of the texture subimage."
            },
            "format": {
                "desc": "Specifies the format of the pixel data. The following symbolic values are accepted: <constant>GL_RED<\/constant>, <constant>GL_RG<\/constant>, <constant>GL_RGB<\/constant>, <constant>GL_BGR<\/constant>, <constant>GL_RGBA<\/constant>, <constant>GL_DEPTH_COMPONENT<\/constant>, and <constant>GL_STENCIL_INDEX<\/constant>."
            },
            "type": {
                "desc": "Specifies the data type of the pixel data. The following symbolic values are accepted: <constant>GL_UNSIGNED_BYTE<\/constant>, <constant>GL_BYTE<\/constant>, <constant>GL_UNSIGNED_SHORT<\/constant>, <constant>GL_SHORT<\/constant>, <constant>GL_UNSIGNED_INT<\/constant>, <constant>GL_INT<\/constant>, <constant>GL_FLOAT<\/constant>, <constant>GL_UNSIGNED_BYTE_3_3_2<\/constant>, <constant>GL_UNSIGNED_BYTE_2_3_3_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_5_6_5<\/constant>, <constant>GL_UNSIGNED_SHORT_5_6_5_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_4_4_4_4<\/constant>, <constant>GL_UNSIGNED_SHORT_4_4_4_4_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_5_5_5_1<\/constant>, <constant>GL_UNSIGNED_SHORT_1_5_5_5_REV<\/constant>, <constant>GL_UNSIGNED_INT_8_8_8_8<\/constant>, <constant>GL_UNSIGNED_INT_8_8_8_8_REV<\/constant>, <constant>GL_UNSIGNED_INT_10_10_10_2<\/constant>, and <constant>GL_UNSIGNED_INT_2_10_10_10_REV<\/constant>."
            },
            "pixels": {
                "desc": "Specifies a pointer to the image data in memory."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "gl_SamplePosition": {
        "summary": "contains the location of the current sample within the current fragment",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBufferSubData": {
        "summary": "updates a subset of a buffer object's data store",
        "params": {
            "target": {
                "desc": "Specifies the target to which the buffer object is bound for glBufferSubData, which must be one of the buffer binding targets in the following table:"
            },
            "buffer": {
                "desc": "Specifies the name of the buffer object for glNamedBufferSubData."
            },
            "offset": {
                "desc": "Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes."
            },
            "size": {
                "desc": "Specifies the size in bytes of the data store region being replaced."
            },
            "data": {
                "desc": "Specifies a pointer to the new data that will be copied into the data store."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2005 Addison-Wesley.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glTexImage3D": {
        "summary": "specify a three-dimensional texture image",
        "params": {
            "target": {
                "desc": "Specifies the target texture. Must be one of <constant>GL_TEXTURE_3D<\/constant>, <constant>GL_PROXY_TEXTURE_3D<\/constant>, <constant>GL_TEXTURE_2D_ARRAY<\/constant> or <constant>GL_PROXY_TEXTURE_2D_ARRAY<\/constant>."
            },
            "level": {
                "desc": "Specifies the level-of-detail number. Level 0 is the base image level. Level n is the   n th   mipmap reduction image."
            },
            "internalformat": {
                "desc": "Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below."
            },
            "width": {
                "desc": "Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide."
            },
            "height": {
                "desc": "Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high."
            },
            "depth": {
                "desc": "Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep."
            },
            "border": {
                "desc": "This value must be 0."
            },
            "format": {
                "desc": "Specifies the format of the pixel data. The following symbolic values are accepted: <constant>GL_RED<\/constant>, <constant>GL_RG<\/constant>, <constant>GL_RGB<\/constant>, <constant>GL_BGR<\/constant>, <constant>GL_RGBA<\/constant>, <constant>GL_BGRA<\/constant>, <constant>GL_RED_INTEGER<\/constant>, <constant>GL_RG_INTEGER<\/constant>, <constant>GL_RGB_INTEGER<\/constant>, <constant>GL_BGR_INTEGER<\/constant>, <constant>GL_RGBA_INTEGER<\/constant>, <constant>GL_BGRA_INTEGER<\/constant>, <constant>GL_STENCIL_INDEX<\/constant>, <constant>GL_DEPTH_COMPONENT<\/constant>, <constant>GL_DEPTH_STENCIL<\/constant>."
            },
            "type": {
                "desc": "Specifies the data type of the pixel data. The following symbolic values are accepted: <constant>GL_UNSIGNED_BYTE<\/constant>, <constant>GL_BYTE<\/constant>, <constant>GL_UNSIGNED_SHORT<\/constant>, <constant>GL_SHORT<\/constant>, <constant>GL_UNSIGNED_INT<\/constant>, <constant>GL_INT<\/constant>, <constant>GL_HALF_FLOAT<\/constant>, <constant>GL_FLOAT<\/constant>, <constant>GL_UNSIGNED_BYTE_3_3_2<\/constant>, <constant>GL_UNSIGNED_BYTE_2_3_3_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_5_6_5<\/constant>, <constant>GL_UNSIGNED_SHORT_5_6_5_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_4_4_4_4<\/constant>, <constant>GL_UNSIGNED_SHORT_4_4_4_4_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_5_5_5_1<\/constant>, <constant>GL_UNSIGNED_SHORT_1_5_5_5_REV<\/constant>, <constant>GL_UNSIGNED_INT_8_8_8_8<\/constant>, <constant>GL_UNSIGNED_INT_8_8_8_8_REV<\/constant>, <constant>GL_UNSIGNED_INT_10_10_10_2<\/constant>, and <constant>GL_UNSIGNED_INT_2_10_10_10_REV<\/constant>."
            },
            "data": {
                "desc": "Specifies a pointer to the image data in memory."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2011-2014 Khronos Group.\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glBindFragDataLocationIndexed": {
        "summary": "bind a user-defined varying out variable to a fragment shader color number and index",
        "params": {
            "program": {
                "desc": "The name of the program containing varying out variable whose binding to modify"
            },
            "colorNumber": {
                "desc": "The color number to bind the user-defined varying out variable to"
            },
            "index": {
                "desc": "The index of the color input to bind the user-defined varying out variable to"
            },
            "name": {
                "desc": "The name of the user-defined varying out variable whose binding to modify"
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glObjectLabel": {
        "summary": "label a named object identified within a namespace",
        "params": {
            "identifier": {
                "desc": "The namespace from which the name of the object is allocated."
            },
            "name": {
                "desc": "The name of the object to label."
            },
            "length": {
                "desc": "The length of the label to be used for the object."
            },
            "label": {
                "desc": "The address of a string containing the label to assign to the object."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDeleteRenderbuffers": {
        "summary": "delete renderbuffer objects",
        "params": {
            "n": {
                "desc": "Specifies the number of renderbuffer objects to be deleted."
            },
            "renderbuffers": {
                "desc": "A pointer to an array containing n renderbuffer objects to be deleted."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glFramebufferTexture": {
        "summary": "attach a level of a texture object as a logical buffer of a framebuffer object",
        "params": {
            "target": {
                "desc": "Specifies the target to which the framebuffer is bound for all commands except glNamedFramebufferTexture."
            },
            "framebuffer": {
                "desc": "Specifies the name of the framebuffer object for glNamedFramebufferTexture."
            },
            "attachment": {
                "desc": "Specifies the attachment point of the framebuffer."
            },
            "textarget": {
                "desc": "For glFramebufferTexture1D, glFramebufferTexture2D and glFramebufferTexture3D, specifies what type of texture is expected in the texture parameter, or for cube map textures, which face is to be attached."
            },
            "texture": {
                "desc": "Specifies the name of an existing texture object to attach."
            },
            "level": {
                "desc": "Specifies the mipmap level of the texture object to attach."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetUniformSubroutine": {
        "summary": "retrieve the value of a subroutine uniform of a given shader stage of the current program",
        "params": {
            "shadertype": {
                "desc": "Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of <constant>GL_VERTEX_SHADER<\/constant>, <constant>GL_TESS_CONTROL_SHADER<\/constant>, <constant>GL_TESS_EVALUATION_SHADER<\/constant>, <constant>GL_GEOMETRY_SHADER<\/constant> or <constant>GL_FRAGMENT_SHADER<\/constant>."
            },
            "location": {
                "desc": "Specifies the location of the subroutine uniform."
            },
            "values": {
                "desc": "Specifies the address of a variable to receive the value or values of the subroutine uniform."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glProvokingVertex": {
        "summary": "specifiy the vertex to be used as the source of data for flat shaded varyings",
        "params": {
            "provokeMode": {
                "desc": "Specifies the vertex to be used as the source of data for flat shaded varyings."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glStencilFuncSeparate": {
        "summary": "set front and\/or back function and reference value for stencil testing",
        "params": {
            "face": {
                "desc": "Specifies whether front and\/or back stencil state is updated. Three symbolic constants are valid: <constant>GL_FRONT<\/constant>, <constant>GL_BACK<\/constant>, and <constant>GL_FRONT_AND_BACK<\/constant>."
            },
            "func": {
                "desc": "Specifies the test function. Eight symbolic constants are valid: <constant>GL_NEVER<\/constant>, <constant>GL_LESS<\/constant>, <constant>GL_LEQUAL<\/constant>, <constant>GL_GREATER<\/constant>, <constant>GL_GEQUAL<\/constant>, <constant>GL_EQUAL<\/constant>, <constant>GL_NOTEQUAL<\/constant>, and <constant>GL_ALWAYS<\/constant>. The initial value is <constant>GL_ALWAYS<\/constant>."
            },
            "ref": {
                "desc": "Specifies the reference value for the stencil test. ref is clamped to the range    0  2 n  - 1   , where n is the number of bitplanes in the stencil buffer. The initial value is 0."
            },
            "mask": {
                "desc": "Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2006 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "gl_PrimitiveID": {
        "summary": "contains the index of the current primitive",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDeleteVertexArrays": {
        "summary": "delete vertex array objects",
        "params": {
            "n": {
                "desc": "Specifies the number of vertex array objects to be deleted."
            },
            "arrays": {
                "desc": "Specifies the address of an array containing the n names of the objects to be deleted."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGenVertexArrays": {
        "summary": "generate vertex array object names",
        "params": {
            "n": {
                "desc": "Specifies the number of vertex array object names to generate."
            },
            "arrays": {
                "desc": "Specifies an array in which the generated vertex array object names are stored."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glPointSize": {
        "summary": "specify the diameter of rasterized points",
        "params": {
            "size": {
                "desc": "Specifies the diameter of rasterized points. The initial value is 1."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glProgramUniform": {
        "summary": "Specify the value of a uniform variable for a specified program object",
        "params": {
            "program": {
                "desc": "Specifies the handle of the program containing the uniform variable to be modified."
            },
            "location": {
                "desc": "Specifies the location of the uniform variable to be modified."
            },
            "count": {
                "desc": "For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array."
            },
            "transpose": {
                "desc": "For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable."
            },
            "\n            v0,\n            v1,\n            v2,\n            v3\n        ": {
                "desc": "For the scalar commands, specifies the new values to be used for the specified uniform variable."
            },
            "value": {
                "desc": "For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glCreateVertexArrays": {
        "summary": "create vertex array objects",
        "params": {
            "n": {
                "desc": "Number of vertex array objects to create."
            },
            "arrays": {
                "desc": "Specifies an array in which names of the new vertex array objects are stored."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glRenderbufferStorageMultisample": {
        "summary": "establish data storage, format, dimensions and sample count of\n    a renderbuffer object's image",
        "params": {
            "target": {
                "desc": "Specifies a binding target of the allocation for glRenderbufferStorageMultisample function. Must be <constant>GL_RENDERBUFFER<\/constant>."
            },
            "renderbuffer": {
                "desc": "Specifies the name of the renderbuffer object for glNamedRenderbufferStorageMultisample function."
            },
            "samples": {
                "desc": "Specifies the number of samples to be used for the renderbuffer object's storage."
            },
            "internalformat": {
                "desc": "Specifies the internal format to use for the renderbuffer object's image."
            },
            "width": {
                "desc": "Specifies the width of the renderbuffer, in pixels."
            },
            "height": {
                "desc": "Specifies the height of the renderbuffer, in pixels."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glTexImage3DMultisample": {
        "summary": "establish the data storage, format, dimensions, and number of samples of a multisample texture's image",
        "params": {
            "target": {
                "desc": "Specifies the target of the operation. target must be <constant>GL_TEXTURE_2D_MULTISAMPLE_ARRAY<\/constant> or <constant>GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY<\/constant>."
            },
            "samples": {
                "desc": "The number of samples in the multisample texture's image."
            },
            "internalformat": {
                "desc": "The internal format to be used to store the multisample texture's image. internalformat must specify a color-renderable, depth-renderable, or stencil-renderable format."
            },
            "width": {
                "desc": "The width of the multisample texture's image, in texels."
            },
            "height": {
                "desc": "The height of the multisample texture's image, in texels."
            },
            "fixedsamplelocations": {
                "desc": "Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDrawElementsBaseVertex": {
        "summary": "render primitives from array data with a per-element offset",
        "params": {
            "mode": {
                "desc": "Specifies what kind of primitives to render. Symbolic constants <constant>GL_POINTS<\/constant>, <constant>GL_LINE_STRIP<\/constant>, <constant>GL_LINE_LOOP<\/constant>, <constant>GL_LINES<\/constant>, <constant>GL_TRIANGLE_STRIP<\/constant>, <constant>GL_TRIANGLE_FAN<\/constant>, <constant>GL_TRIANGLES<\/constant>, <constant>GL_LINES_ADJACENCY<\/constant>, <constant>GL_LINE_STRIP_ADJACENCY<\/constant>, <constant>GL_TRIANGLES_ADJACENCY<\/constant>, <constant>GL_TRIANGLE_STRIP_ADJACENCY<\/constant> and <constant>GL_PATCHES<\/constant> are accepted."
            },
            "count": {
                "desc": "Specifies the number of elements to be rendered."
            },
            "type": {
                "desc": "Specifies the type of the values in indices. Must be one of <constant>GL_UNSIGNED_BYTE<\/constant>, <constant>GL_UNSIGNED_SHORT<\/constant>, or <constant>GL_UNSIGNED_INT<\/constant>."
            },
            "indices": {
                "desc": "Specifies a pointer to the location where the indices are stored."
            },
            "basevertex": {
                "desc": "Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBindVertexBuffer": {
        "summary": "bind a buffer to a vertex buffer bind point",
        "params": {
            "vaobj": {
                "desc": "Specifies the name of the vertex array object to be used by glVertexArrayVertexBuffer function."
            },
            "bindingindex": {
                "desc": "The index of the vertex buffer binding point to which to bind the buffer."
            },
            "buffer": {
                "desc": "The name of a buffer to bind to the vertex buffer binding point."
            },
            "offset": {
                "desc": "The offset of the first element of the buffer."
            },
            "stride": {
                "desc": "The distance between elements within the buffer."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n  "
    },
    "glGetCompressedTexImage": {
        "summary": "return a compressed texture image",
        "params": {
            "target": {
                "desc": "Specifies the target to which the texture is bound for glGetCompressedTexImage and glGetnCompressedTexImage functions. <constant>GL_TEXTURE_1D<\/constant>, <constant>GL_TEXTURE_1D_ARRAY<\/constant>, <constant>GL_TEXTURE_2D<\/constant>, <constant>GL_TEXTURE_2D_ARRAY<\/constant>, <constant>GL_TEXTURE_3D<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_ARRAY<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_X<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_X<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_Y<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_Y<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_Z<\/constant>, and <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_Z<\/constant>, <constant>GL_TEXTURE_RECTANGLE<\/constant> are accepted."
            },
            "texture": {
                "desc": "Specifies the texture object name for glGetCompressedTextureImage function."
            },
            "level": {
                "desc": "Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level $n$ is the $n$-th mipmap reduction image."
            },
            "bufSize": {
                "desc": "Specifies the size of the buffer pixels for glGetCompressedTextureImage and glGetnCompressedTexImage functions."
            },
            "pixels": {
                "desc": "Returns the compressed texture image."
            }
        },
        "copyright": "\n    Copyright\n\n    Copyright  1991-2006 Silicon Graphics,\n    Inc. Copyright  2010-2014 Khronos Group.\n    This document is licensed under the SGI Free Software B License. For\n    details, see\n    https:\/\/opencontent.org\/openpub\/.\n    \n  "
    },
    "glDepthRange": {
        "summary": "specify mapping of depth values from normalized device coordinates to window coordinates",
        "params": {
            "nearVal": {
                "desc": "Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0."
            },
            "farVal": {
                "desc": "Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glGetAttachedShaders": {
        "summary": "Returns the handles of the shader objects attached to a program object",
        "params": {
            "program": {
                "desc": "Specifies the program object to be queried."
            },
            "maxCount": {
                "desc": "Specifies the size of the array for storing the returned object names."
            },
            "count": {
                "desc": "Returns the number of names actually returned in shaders."
            },
            "shaders": {
                "desc": "Specifies an array that is used to return the names of attached shader objects."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "gl_NumWorkGroups": {
        "summary": "contains the number of workgroups that have been dispatched to a compute shader",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBeginQueryIndexed, glEndQueryIndexed": {
        "summary": "delimit the boundaries of a query object on an indexed target",
        "params": {
            "target": {
                "desc": "Specifies the target type of query object established between glBeginQueryIndexed and the subsequent  glEndQueryIndexed. The symbolic constant must be one of <constant>GL_SAMPLES_PASSED<\/constant>, <constant>GL_ANY_SAMPLES_PASSED<\/constant>, <constant>GL_PRIMITIVES_GENERATED<\/constant>, <constant>GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN<\/constant>, or <constant>GL_TIME_ELAPSED<\/constant>."
            },
            "index": {
                "desc": "Specifies the index of the query target upon which to begin the query."
            },
            "id": {
                "desc": "Specifies the name of a query object."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBindSampler": {
        "summary": "bind a named sampler to a texturing target",
        "params": {
            "unit": {
                "desc": "Specifies the index of the texture unit to which the sampler is bound."
            },
            "sampler": {
                "desc": "Specifies the name of a sampler."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glIsFramebuffer": {
        "summary": "determine if a name corresponds to a framebuffer object",
        "params": {
            "framebuffer": {
                "desc": "Specifies a value that may be the name of a framebuffer object."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetShader": {
        "summary": "Returns a parameter from a shader object",
        "params": {
            "shader": {
                "desc": "Specifies the shader object to be queried."
            },
            "pname": {
                "desc": "Specifies the object parameter. Accepted symbolic names are <constant>GL_SHADER_TYPE<\/constant>, <constant>GL_DELETE_STATUS<\/constant>, <constant>GL_COMPILE_STATUS<\/constant>, <constant>GL_INFO_LOG_LENGTH<\/constant>, <constant>GL_SHADER_SOURCE_LENGTH<\/constant>."
            },
            "params": {
                "desc": "Returns the requested object parameter."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glUniformBlockBinding": {
        "summary": "assign a binding point to an active uniform block",
        "params": {
            "program": {
                "desc": "The name of a program object containing the active uniform block whose binding to assign."
            },
            "uniformBlockIndex": {
                "desc": "The index of the active uniform block within program whose binding to assign."
            },
            "uniformBlockBinding": {
                "desc": "Specifies the binding point to which to bind the uniform block with index uniformBlockIndex within program."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glUniform": {
        "summary": "Specify the value of a uniform variable for the current program object",
        "params": {
            "location": {
                "desc": "Specifies the location of the uniform variable to be modified."
            },
            "count": {
                "desc": "For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array."
            },
            "transpose": {
                "desc": "For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable."
            },
            "\n            v0,\n            v1,\n            v2,\n            v3\n        ": {
                "desc": "For the scalar commands, specifies the new values to be used for the specified uniform variable."
            },
            "value": {
                "desc": "For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetActiveUniform": {
        "summary": "Returns information about an active uniform variable for the specified program object",
        "params": {
            "program": {
                "desc": "Specifies the program object to be queried."
            },
            "index": {
                "desc": "Specifies the index of the uniform variable to be queried."
            },
            "bufSize": {
                "desc": "Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name."
            },
            "length": {
                "desc": "Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than <constant>NULL<\/constant> is passed."
            },
            "size": {
                "desc": "Returns the size of the uniform variable."
            },
            "type": {
                "desc": "Returns the data type of the uniform variable."
            },
            "name": {
                "desc": "Returns a null terminated string containing the name of the uniform variable."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBindTexture": {
        "summary": "bind a named texture to a texturing target",
        "params": {
            "target": {
                "desc": "Specifies the target to which the texture is bound. Must be one of <constant>GL_TEXTURE_1D<\/constant>, <constant>GL_TEXTURE_2D<\/constant>, <constant>GL_TEXTURE_3D<\/constant>, <constant>GL_TEXTURE_1D_ARRAY<\/constant>, <constant>GL_TEXTURE_2D_ARRAY<\/constant>, <constant>GL_TEXTURE_RECTANGLE<\/constant>, <constant>GL_TEXTURE_CUBE_MAP<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_ARRAY<\/constant>, <constant>GL_TEXTURE_BUFFER<\/constant>, <constant>GL_TEXTURE_2D_MULTISAMPLE<\/constant> or <constant>GL_TEXTURE_2D_MULTISAMPLE_ARRAY<\/constant>."
            },
            "texture": {
                "desc": "Specifies the name of a texture."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glCompressedTexSubImage1D": {
        "summary": "specify a one-dimensional texture subimage in a compressed\n    format",
        "params": {
            "target": {
                "desc": "Specifies the target, to which the texture is bound, for glCompressedTexSubImage1D function. Must be <constant>GL_TEXTURE_1D<\/constant>."
            },
            "texture": {
                "desc": "Specifies the texture object name for glCompressedTextureSubImage1D function."
            },
            "level": {
                "desc": "Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image."
            },
            "xoffset": {
                "desc": "Specifies a texel offset in the x direction within the texture array."
            },
            "width": {
                "desc": "Specifies the width of the texture subimage."
            },
            "format": {
                "desc": "Specifies the format of the compressed image data stored at address data."
            },
            "imageSize": {
                "desc": "Specifies the number of unsigned bytes of image data starting at the address specified by data."
            },
            "data": {
                "desc": "Specifies a pointer to the compressed image data in memory."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glGetGraphicsResetStatus": {
        "summary": "check if the rendering context has not been lost due to software or hardware issues",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glIsVertexArray": {
        "summary": "determine if a name corresponds to a vertex array object",
        "params": {
            "array": {
                "desc": "Specifies a value that may be the name of a vertex array object."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBindTextureUnit": {
        "summary": "bind an existing texture object to the specified texture unit ",
        "params": {
            "\n          unit\n        ": {
                "desc": "Specifies the texture unit, to which the texture object should be bound to."
            },
            "\n          texture\n        ": {
                "desc": "Specifies the name of a texture."
            }
        },
        "copyright": "\n    Copyright\n    \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glVertexBindingDivisor": {
        "summary": "modify the rate at which generic vertex attributes\n    advance",
        "params": {
            "vaobj": {
                "desc": "Specifies the name of the vertex array object for glVertexArrayBindingDivisor function."
            },
            "bindingindex": {
                "desc": "The index of the binding whose divisor to modify."
            },
            "divisor": {
                "desc": "The new value for the instance step rate to apply."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetVertexArrayiv": {
        "summary": "retrieve parameters of a vertex array object",
        "params": {
            "vaobj": {
                "desc": "specifies the name of the vertex array object to use for the query."
            },
            "pname": {
                "desc": "Name of the property to use for the query. Must be <constant>GL_ELEMENT_ARRAY_BUFFER_BINDING<\/constant>."
            },
            "param": {
                "desc": "Returns the requested value."
            }
        },
        "copyright": "\n    Copyright\n\n    Copyright  2014 Khronos Group. This\n    material may be distributed subject to the terms and conditions set forth\n    in the Open Publication License, v 1.0, 8 June 1999. https:\/\/opencontent.org\/openpub\/.\n  "
    },
    "glCopyTexImage1D": {
        "summary": "copy pixels into a 1D texture image",
        "params": {
            "target": {
                "desc": "Specifies the target texture. Must be <constant>GL_TEXTURE_1D<\/constant>."
            },
            "level": {
                "desc": "Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image."
            },
            "internalformat": {
                "desc": "Specifies the internal format of the texture. Must be one of the following symbolic constants: <constant>GL_COMPRESSED_RED<\/constant>, <constant>GL_COMPRESSED_RG<\/constant>, <constant>GL_COMPRESSED_RGB<\/constant>, <constant>GL_COMPRESSED_RGBA<\/constant>. <constant>GL_COMPRESSED_SRGB<\/constant>, <constant>GL_COMPRESSED_SRGB_ALPHA<\/constant>. <constant>GL_DEPTH_COMPONENT<\/constant>, <constant>GL_DEPTH_COMPONENT16<\/constant>, <constant>GL_DEPTH_COMPONENT24<\/constant>, <constant>GL_DEPTH_COMPONENT32<\/constant>, <constant>GL_STENCIL_INDEX8<\/constant>, <constant>GL_RED<\/constant>, <constant>GL_RG<\/constant>, <constant>GL_RGB<\/constant>, <constant>GL_R3_G3_B2<\/constant>, <constant>GL_RGB4<\/constant>, <constant>GL_RGB5<\/constant>, <constant>GL_RGB8<\/constant>, <constant>GL_RGB10<\/constant>, <constant>GL_RGB12<\/constant>, <constant>GL_RGB16<\/constant>, <constant>GL_RGBA<\/constant>, <constant>GL_RGBA2<\/constant>, <constant>GL_RGBA4<\/constant>, <constant>GL_RGB5_A1<\/constant>, <constant>GL_RGBA8<\/constant>, <constant>GL_RGB10_A2<\/constant>, <constant>GL_RGBA12<\/constant>, <constant>GL_RGBA16<\/constant>, <constant>GL_SRGB<\/constant>, <constant>GL_SRGB8<\/constant>, <constant>GL_SRGB_ALPHA<\/constant>, or <constant>GL_SRGB8_ALPHA8<\/constant>."
            },
            "x": {
                "desc": "Specify the window coordinates of the left corner of the row of pixels to be copied."
            },
            "width": {
                "desc": "Specifies the width of the texture image. The height of the texture image is 1."
            },
            "border": {
                "desc": "Must be 0."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006\n            Silicon Graphics, Inc.\n            Copyright  2012-2014 Khronos Group.\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glGenSamplers": {
        "summary": "generate sampler object names",
        "params": {
            "n": {
                "desc": "Specifies the number of sampler object names to generate."
            },
            "samplers": {
                "desc": "Specifies an array in which the generated sampler object names are stored."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetSynciv": {
        "summary": "query the properties of a sync object",
        "params": {
            "sync": {
                "desc": "Specifies the sync object whose properties to query."
            },
            "pname": {
                "desc": "Specifies the parameter whose value to retrieve from the sync object specified in sync."
            },
            "bufSize": {
                "desc": "Specifies the size of the buffer whose address is given in values."
            },
            "length": {
                "desc": "Specifies the address of an variable to receive the number of integers placed in values."
            },
            "values": {
                "desc": "Specifies the address of an array to receive the values of the queried parameter."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetTransformFeedback": {
        "summary": "query the state of a transform feedback object.",
        "params": {
            "xfb": {
                "desc": "The name of an existing transform feedback object, or zero for the default transform feedback object."
            },
            "pname": {
                "desc": "Property to use for the query. Must be one of the values: <constant>GL_TRANSFORM_FEEDBACK_BUFFER_BINDING<\/constant>, <constant>GL_TRANSFORM_FEEDBACK_BUFFER_START<\/constant>, <constant>GL_TRANSFORM_FEEDBACK_BUFFER_SIZE<\/constant>, <constant>GL_TRANSFORM_FEEDBACK_PAUSED<\/constant>, <constant>GL_TRANSFORM_FEEDBACK_ACTIVE<\/constant>."
            },
            "index": {
                "desc": "Index of the transform feedback stream (for indexed state)."
            },
            "param": {
                "desc": "The address of a buffer into which will be written the requested state information."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDetachShader": {
        "summary": "Detaches a shader object from a program object to which it is attached",
        "params": {
            "program": {
                "desc": "Specifies the program object from which to detach the shader object."
            },
            "shader": {
                "desc": "Specifies the shader object to be detached."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDeleteShader": {
        "summary": "Deletes a shader object",
        "params": {
            "shader": {
                "desc": "Specifies the shader object to be deleted."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetActiveSubroutineName": {
        "summary": "query the name of an active shader subroutine",
        "params": {
            "program": {
                "desc": "Specifies the name of the program containing the subroutine."
            },
            "shadertype": {
                "desc": "Specifies the shader stage from which to query the subroutine name."
            },
            "index": {
                "desc": "Specifies the index of the shader subroutine uniform."
            },
            "bufSize": {
                "desc": "Specifies the size of the buffer whose address is given in name."
            },
            "length": {
                "desc": "Specifies the address of a variable which is to receive the length of the shader subroutine uniform name."
            },
            "name": {
                "desc": "Specifies the address of an array into which the name of the shader subroutine uniform will be written."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetCompressedTextureSubImage": {
        "summary": "retrieve a sub-region of a compressed texture image from a\n    compressed texture object",
        "params": {
            "texture": {
                "desc": "Specifies the name of the source texture object. Must be <constant>GL_TEXTURE_1D<\/constant>, <constant>GL_TEXTURE_1D_ARRAY<\/constant>, <constant>GL_TEXTURE_2D<\/constant>, <constant>GL_TEXTURE_2D_ARRAY<\/constant>, <constant>GL_TEXTURE_3D<\/constant>, <constant>GL_TEXTURE_CUBE_MAP<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_ARRAY<\/constant> or <constant>GL_TEXTURE_RECTANGLE<\/constant>. In specific, buffer and multisample textures are not permitted."
            },
            "level": {
                "desc": "Specifies the level-of-detail number. Level 0 is the base image level. Level $n$ is the $n$th mipmap reduction image."
            },
            "xoffset": {
                "desc": "Specifies a texel offset in the x direction within the texture array."
            },
            "yoffset": {
                "desc": "Specifies a texel offset in the y direction within the texture array."
            },
            "zoffset": {
                "desc": "Specifies a texel offset in the z direction within the texture array."
            },
            "width": {
                "desc": "Specifies the width of the texture subimage. Must be a multiple of the compressed block's width, unless the offset is zero and the size equals the texture image size."
            },
            "height": {
                "desc": "Specifies the height of the texture subimage. Must be a multiple of the compressed block's height, unless the offset is zero and the size equals the texture image size."
            },
            "depth": {
                "desc": "Specifies the depth of the texture subimage. Must be a multiple of the compressed block's depth, unless the offset is zero and the size equals the texture image size."
            },
            "bufSize": {
                "desc": "Specifies the size of the buffer to receive the retrieved pixel data."
            },
            "pixels": {
                "desc": "Returns the texture subimage. Should be a pointer to an array of the type specified by type."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDebugMessageInsert": {
        "summary": "inject an application-supplied message into the debug message queue",
        "params": {
            "source": {
                "desc": "The source of the debug message to insert."
            },
            "type": {
                "desc": "The type of the debug message insert."
            },
            "id": {
                "desc": "The user-supplied identifier of the message to insert."
            },
            "severity": {
                "desc": "The severity of the debug messages to insert."
            },
            "length": {
                "desc": "The length string contained in the character array whose address is given by message."
            },
            "message": {
                "desc": "The address of a character array containing the message to insert."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetTextureSubImage": {
        "summary": "retrieve a sub-region of a texture image from a texture\n    object",
        "params": {
            "texture": {
                "desc": "Specifies the name of the source texture object. Must be <constant>GL_TEXTURE_1D<\/constant>, <constant>GL_TEXTURE_1D_ARRAY<\/constant>, <constant>GL_TEXTURE_2D<\/constant>, <constant>GL_TEXTURE_2D_ARRAY<\/constant>, <constant>GL_TEXTURE_3D<\/constant>, <constant>GL_TEXTURE_CUBE_MAP<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_ARRAY<\/constant> or <constant>GL_TEXTURE_RECTANGLE<\/constant>. In specific, buffer and multisample textures are not permitted."
            },
            "level": {
                "desc": "Specifies the level-of-detail number. Level 0 is the base image level. Level $n$ is the $n$th mipmap reduction image."
            },
            "xoffset": {
                "desc": "Specifies a texel offset in the x direction within the texture array."
            },
            "yoffset": {
                "desc": "Specifies a texel offset in the y direction within the texture array."
            },
            "zoffset": {
                "desc": "Specifies a texel offset in the z direction within the texture array."
            },
            "width": {
                "desc": "Specifies the width of the texture subimage."
            },
            "height": {
                "desc": "Specifies the height of the texture subimage."
            },
            "depth": {
                "desc": "Specifies the depth of the texture subimage."
            },
            "format": {
                "desc": "Specifies the format of the pixel data. The following symbolic values are accepted: <constant>GL_RED<\/constant>, <constant>GL_RG<\/constant>, <constant>GL_RGB<\/constant>, <constant>GL_BGR<\/constant>, <constant>GL_RGBA<\/constant>, <constant>GL_BGRA<\/constant>, <constant>GL_DEPTH_COMPONENT<\/constant> and <constant>GL_STENCIL_INDEX<\/constant>."
            },
            "type": {
                "desc": "Specifies the data type of the pixel data. The following symbolic values are accepted: <constant>GL_UNSIGNED_BYTE<\/constant>, <constant>GL_BYTE<\/constant>, <constant>GL_UNSIGNED_SHORT<\/constant>, <constant>GL_SHORT<\/constant>, <constant>GL_UNSIGNED_INT<\/constant>, <constant>GL_INT<\/constant>, <constant>GL_FLOAT<\/constant>, <constant>GL_UNSIGNED_BYTE_3_3_2<\/constant>, <constant>GL_UNSIGNED_BYTE_2_3_3_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_5_6_5<\/constant>, <constant>GL_UNSIGNED_SHORT_5_6_5_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_4_4_4_4<\/constant>, <constant>GL_UNSIGNED_SHORT_4_4_4_4_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_5_5_5_1<\/constant>, <constant>GL_UNSIGNED_SHORT_1_5_5_5_REV<\/constant>, <constant>GL_UNSIGNED_INT_8_8_8_8<\/constant>, <constant>GL_UNSIGNED_INT_8_8_8_8_REV<\/constant>, <constant>GL_UNSIGNED_INT_10_10_10_2<\/constant>, and <constant>GL_UNSIGNED_INT_2_10_10_10_REV<\/constant>."
            },
            "bufSize": {
                "desc": "Specifies the size of the buffer to receive the retrieved pixel data."
            },
            "pixels": {
                "desc": "Returns the texture subimage. Should be a pointer to an array of the type specified by type."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glCreateTextures": {
        "summary": "create texture objects",
        "params": {
            "target": {
                "desc": "Specifies the effective texture target of each created texture."
            },
            "n": {
                "desc": "Number of texture objects to create."
            },
            "textures": {
                "desc": "Specifies an array in which names of the new texture objects are stored."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBindProgramPipeline": {
        "summary": "bind a program pipeline to the current context",
        "params": {
            "pipeline": {
                "desc": "Specifies the name of the pipeline object to bind to the context."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetProgramBinary": {
        "summary": "return a binary representation of a program object's compiled and linked executable source",
        "params": {
            "program": {
                "desc": "Specifies the name of a program object whose binary representation to retrieve."
            },
            "bufSize": {
                "desc": "Specifies the size of the buffer whose address is given by binary."
            },
            "length": {
                "desc": "Specifies the address of a variable to receive the number of bytes written into binary."
            },
            "binaryFormat": {
                "desc": "Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL."
            },
            "binary": {
                "desc": "Specifies the address an array into which the GL will return program's binary representation."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glTexBufferRange": {
        "summary": "attach a range of a buffer object's data store to a buffer texture object",
        "params": {
            "target": {
                "desc": "Specifies the target to which the texture object is bound for glTexBufferRange. Must be <constant>GL_TEXTURE_BUFFER<\/constant>."
            },
            "texture": {
                "desc": "Specifies the texture object name for glTextureBufferRange."
            },
            "internalformat": {
                "desc": "Specifies the internal format of the data in the store belonging to buffer."
            },
            "buffer": {
                "desc": "Specifies the name of the buffer object whose storage to attach to the active buffer texture."
            },
            "offset": {
                "desc": "Specifies the offset of the start of the range of the buffer's data store to attach."
            },
            "size": {
                "desc": "Specifies the size of the range of the buffer's data store to attach."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2012-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDeleteBuffers": {
        "summary": "delete named buffer objects",
        "params": {
            "n": {
                "desc": "Specifies the number of buffer objects to be deleted."
            },
            "buffers": {
                "desc": "Specifies an array of buffer objects to be deleted."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2005 Addison-Wesley.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDeleteSync": {
        "summary": "delete a sync object",
        "params": {
            "sync": {
                "desc": "The sync object to be deleted."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetShaderPrecisionFormat": {
        "summary": "retrieve the range and precision for numeric formats supported by the shader compiler",
        "params": {
            "shaderType": {
                "desc": "Specifies the type of shader whose precision to query. shaderType must be <constant>GL_VERTEX_SHADER<\/constant> or <constant>GL_FRAGMENT_SHADER<\/constant>."
            },
            "precisionType": {
                "desc": "Specifies the numeric format whose precision and range to query."
            },
            "range": {
                "desc": "Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned."
            },
            "precision": {
                "desc": "Specifies the address of an integer into which the numeric precision of the implementation is written."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDispatchComputeIndirect": {
        "summary": "launch one or more compute work groups using parameters stored in a buffer",
        "params": {
            "indirect": {
                "desc": "The offset into the buffer object currently bound to the <constant>GL_DISPATCH_INDIRECT_BUFFER<\/constant> buffer target at which the dispatch parameters are stored."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDrawElementsInstanced": {
        "summary": "draw multiple instances of a set of elements",
        "params": {
            "mode": {
                "desc": "Specifies what kind of primitives to render. Symbolic constants <constant>GL_POINTS<\/constant>, <constant>GL_LINE_STRIP<\/constant>, <constant>GL_LINE_LOOP<\/constant>, <constant>GL_LINES<\/constant>, <constant>GL_LINE_STRIP_ADJACENCY<\/constant>, <constant>GL_LINES_ADJACENCY<\/constant>, <constant>GL_TRIANGLE_STRIP<\/constant>, <constant>GL_TRIANGLE_FAN<\/constant>, <constant>GL_TRIANGLES<\/constant>, <constant>GL_TRIANGLE_STRIP_ADJACENCY<\/constant>, <constant>GL_TRIANGLES_ADJACENCY<\/constant> and <constant>GL_PATCHES<\/constant> are accepted."
            },
            "count": {
                "desc": "Specifies the number of elements to be rendered."
            },
            "type": {
                "desc": "Specifies the type of the values in indices. Must be one of <constant>GL_UNSIGNED_BYTE<\/constant>, <constant>GL_UNSIGNED_SHORT<\/constant>, or <constant>GL_UNSIGNED_INT<\/constant>."
            },
            "indices": {
                "desc": "Specifies a pointer to the location where the indices are stored."
            },
            "instancecount": {
                "desc": "Specifies the number of instances of the specified range of indices to be rendered."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetProgramPipeline": {
        "summary": "retrieve properties of a program pipeline object",
        "params": {
            "pipeline": {
                "desc": "Specifies the name of a program pipeline object whose parameter retrieve."
            },
            "pname": {
                "desc": "Specifies the name of the parameter to retrieve."
            },
            "params": {
                "desc": "Specifies the address of a variable into which will be written the value or values of pname for pipeline."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetProgramResourceName": {
        "summary": "query the name of an indexed resource within a program",
        "params": {
            "program": {
                "desc": "The name of a program object whose resources to query."
            },
            "programInterface": {
                "desc": "A token identifying the interface within program containing the indexed resource."
            },
            "index": {
                "desc": "The index of the resource within programInterface of program."
            },
            "bufSize": {
                "desc": "The size of the character array whose address is given by name."
            },
            "length": {
                "desc": "The address of a variable which will receive the length of the resource name."
            },
            "name": {
                "desc": "The address of a character array into which will be written the name of the resource."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glCreateBuffers": {
        "summary": "create buffer objects",
        "params": {
            "n": {
                "desc": "Specifies the number of buffer objects to create."
            },
            "buffers": {
                "desc": "Specifies an array in which names of the new buffer objects are stored."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBeginQuery": {
        "summary": "delimit the boundaries of a query object",
        "params": {
            "target": {
                "desc": "Specifies the target type of query object established between glBeginQuery and the subsequent  glEndQuery. The symbolic constant must be one of <constant>GL_SAMPLES_PASSED<\/constant>, <constant>GL_ANY_SAMPLES_PASSED<\/constant>, <constant>GL_ANY_SAMPLES_PASSED_CONSERVATIVE<\/constant>, <constant>GL_PRIMITIVES_GENERATED<\/constant>, <constant>GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN<\/constant>, or <constant>GL_TIME_ELAPSED<\/constant>."
            },
            "id": {
                "desc": "Specifies the name of a query object."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2005 Addison-Wesley.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBlendFuncSeparate": {
        "summary": "specify pixel arithmetic for RGB and alpha components separately",
        "params": {
            "buf": {
                "desc": "For glBlendFuncSeparatei, specifies the index of the draw buffer for which to set the blend functions."
            },
            "srcRGB": {
                "desc": "Specifies how the red, green, and blue blending factors are computed. The initial value is <constant>GL_ONE<\/constant>."
            },
            "dstRGB": {
                "desc": "Specifies how the red, green, and blue destination blending factors are computed. The initial value is <constant>GL_ZERO<\/constant>."
            },
            "srcAlpha": {
                "desc": "Specified how the alpha source blending factor is computed. The initial value is <constant>GL_ONE<\/constant>."
            },
            "dstAlpha": {
                "desc": "Specified how the alpha destination blending factor is computed. The initial value is <constant>GL_ZERO<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2018 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glBlendFunc": {
        "summary": "specify pixel arithmetic",
        "params": {
            "buf": {
                "desc": "For glBlendFunci, specifies the index of the draw buffer for which to set the blend function."
            },
            "sfactor": {
                "desc": "Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is <constant>GL_ONE<\/constant>."
            },
            "dfactor": {
                "desc": "Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: <constant>GL_ZERO<\/constant>, <constant>GL_ONE<\/constant>, <constant>GL_SRC_COLOR<\/constant>, <constant>GL_ONE_MINUS_SRC_COLOR<\/constant>, <constant>GL_DST_COLOR<\/constant>, <constant>GL_ONE_MINUS_DST_COLOR<\/constant>, <constant>GL_SRC_ALPHA<\/constant>, <constant>GL_ONE_MINUS_SRC_ALPHA<\/constant>, <constant>GL_DST_ALPHA<\/constant>, <constant>GL_ONE_MINUS_DST_ALPHA<\/constant>. <constant>GL_CONSTANT_COLOR<\/constant>, <constant>GL_ONE_MINUS_CONSTANT_COLOR<\/constant>, <constant>GL_CONSTANT_ALPHA<\/constant>, and <constant>GL_ONE_MINUS_CONSTANT_ALPHA<\/constant>. The initial value is <constant>GL_ZERO<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "gl_PatchVerticesIn": {
        "summary": "contains the number of vertices in the current patch",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glClearBuffer": {
        "summary": "clear individual buffers of a framebuffer",
        "params": {
            "framebuffer": {
                "desc": "Specifies the name of the framebuffer object for glClearNamedFramebuffer*."
            },
            "buffer": {
                "desc": "Specify the buffer to clear."
            },
            "drawbuffer": {
                "desc": "Specify a particular draw buffer to clear."
            },
            "value": {
                "desc": "A pointer to the value or values to clear the buffer to."
            },
            "depth": {
                "desc": "The value to clear the depth buffer to."
            },
            "stencil": {
                "desc": "The value to clear the stencil buffer to."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glIsTexture": {
        "summary": "determine if a name corresponds to a texture",
        "params": {
            "texture": {
                "desc": "Specifies a value that may be the name of a texture."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glGetTransformFeedbackVarying": {
        "summary": "retrieve information about varying variables selected for transform feedback",
        "params": {
            "program": {
                "desc": "The name of the target program object."
            },
            "index": {
                "desc": "The index of the varying variable whose information to retrieve."
            },
            "bufSize": {
                "desc": "The maximum number of characters, including the null terminator, that may be written into name."
            },
            "length": {
                "desc": "The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is <constant>NULL<\/constant> no length is returned."
            },
            "size": {
                "desc": "The address of a variable that will receive the size of the varying."
            },
            "type": {
                "desc": "The address of a variable that will receive the type of the varying."
            },
            "name": {
                "desc": "The address of a buffer into which will be written the name of the varying."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetMultisamplefv": {
        "summary": "retrieve the location of a sample",
        "params": {
            "pname": {
                "desc": "Specifies the sample parameter name. pname must be <constant>GL_SAMPLE_POSITION<\/constant>."
            },
            "index": {
                "desc": "Specifies the index of the sample whose position to query."
            },
            "val": {
                "desc": "Specifies the address of an array to receive the position of the sample."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glCopyTexSubImage1D": {
        "summary": "copy a one-dimensional texture subimage",
        "params": {
            "target": {
                "desc": "Specifies the target to which the texture object is bound for glCopyTexSubImage1D function. Must be <constant>GL_TEXTURE_1D<\/constant>."
            },
            "texture": {
                "desc": "Specifies the texture object name for glCopyTextureSubImage1D function."
            },
            "level": {
                "desc": "Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image."
            },
            "xoffset": {
                "desc": "Specifies the texel offset within the texture array."
            },
            "x": {
                "desc": "Specify the window coordinates of the left corner of the row of pixels to be copied."
            },
            "width": {
                "desc": "Specifies the width of the texture subimage."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006\n            Silicon Graphics, Inc.\n            Copyright  2012-2014 Khronos Group.\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glGetRenderbufferParameter": {
        "summary": "query a named parameter of a renderbuffer object",
        "params": {
            "target": {
                "desc": "Specifies the target to which the renderbuffer object is bound for glGetRenderbufferParameteriv. target must be <constant>GL_RENDERBUFFER<\/constant>."
            },
            "renderbuffer": {
                "desc": "Specifies the name of the renderbuffer object for glGetNamedRenderbufferParameteriv."
            },
            "pname": {
                "desc": "Specifies the parameter of the renderbuffer object to query."
            },
            "params": {
                "desc": "Returns the value of parameter pname for the renderbuffer object."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glCopyBufferSubData": {
        "summary": "copy all or part of the data store of a buffer object to the data store of another buffer object",
        "params": {
            "readTarget": {
                "desc": "Specifies the target to which the source buffer object is bound for glCopyBufferSubData"
            },
            "writeTarget": {
                "desc": "Specifies the target to which the destination buffer object is bound for glCopyBufferSubData."
            },
            "readBuffer": {
                "desc": "Specifies the name of the source buffer object for glCopyNamedBufferSubData."
            },
            "writeBuffer": {
                "desc": "Specifies the name of the destination buffer object for glCopyNamedBufferSubData."
            },
            "readOffset": {
                "desc": "Specifies the offset, in basic machine units, within the data store of the source buffer object at which data will be read."
            },
            "writeOffset": {
                "desc": "Specifies the offset, in basic machine units, within the data store of the destination buffer object at which data will be written."
            },
            "size": {
                "desc": "Specifies the size, in basic machine units, of the data to be copied from the source buffer object to the destination buffer object."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glFenceSync": {
        "summary": "create a new sync object and insert it into the GL command stream",
        "params": {
            "condition": {
                "desc": "Specifies the condition that must be met to set the sync object's state to signaled. condition must be <constant>GL_SYNC_GPU_COMMANDS_COMPLETE<\/constant>."
            },
            "flags": {
                "desc": "Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero. flags is a placeholder for anticipated future extensions of fence sync object capabilities."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glIsSync": {
        "summary": "determine if a name corresponds to a sync object",
        "params": {
            "sync": {
                "desc": "Specifies a value that may be the name of a sync object."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDeleteTextures": {
        "summary": "delete named textures",
        "params": {
            "n": {
                "desc": "Specifies the number of textures to be deleted."
            },
            "textures": {
                "desc": "Specifies an array of textures to be deleted."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glDrawTransformFeedbackInstanced": {
        "summary": "render multiple instances of primitives using a count derived from a transform feedback object",
        "params": {
            "mode": {
                "desc": "Specifies what kind of primitives to render. Symbolic constants <constant>GL_POINTS<\/constant>, <constant>GL_LINE_STRIP<\/constant>, <constant>GL_LINE_LOOP<\/constant>, <constant>GL_LINES<\/constant>, <constant>GL_LINE_STRIP_ADJACENCY<\/constant>, <constant>GL_LINES_ADJACENCY<\/constant>, <constant>GL_TRIANGLE_STRIP<\/constant>, <constant>GL_TRIANGLE_FAN<\/constant>, <constant>GL_TRIANGLES<\/constant>, <constant>GL_TRIANGLE_STRIP_ADJACENCY<\/constant>, <constant>GL_TRIANGLES_ADJACENCY<\/constant>, and <constant>GL_PATCHES<\/constant> are accepted."
            },
            "id": {
                "desc": "Specifies the name of a transform feedback object from which to retrieve a primitive count."
            },
            "instancecount": {
                "desc": "Specifies the number of instances of the geometry to render."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "gl_PointSize": {
        "summary": "contains size of rasterized points, in pixels",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glClampColor": {
        "summary": "specify whether data read via glReadPixels should be clamped",
        "params": {
            "target": {
                "desc": "Target for color clamping. target must be <constant>GL_CLAMP_READ_COLOR<\/constant>."
            },
            "clamp": {
                "desc": "Specifies whether to apply color clamping. clamp must be <constant>GL_TRUE<\/constant> or <constant>GL_FALSE<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glStencilOp": {
        "summary": "set front and back stencil test actions",
        "params": {
            "sfail": {
                "desc": "Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: <constant>GL_KEEP<\/constant>, <constant>GL_ZERO<\/constant>, <constant>GL_REPLACE<\/constant>, <constant>GL_INCR<\/constant>, <constant>GL_INCR_WRAP<\/constant>, <constant>GL_DECR<\/constant>, <constant>GL_DECR_WRAP<\/constant>, and <constant>GL_INVERT<\/constant>. The initial value is <constant>GL_KEEP<\/constant>."
            },
            "dpfail": {
                "desc": "Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is <constant>GL_KEEP<\/constant>."
            },
            "dppass": {
                "desc": "Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is <constant>GL_KEEP<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glIsSampler": {
        "summary": "determine if a name corresponds to a sampler object",
        "params": {
            "id": {
                "desc": "Specifies a value that may be the name of a sampler object."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBindTransformFeedback": {
        "summary": "bind a transform feedback object",
        "params": {
            "target": {
                "desc": "Specifies the target to which to bind the transform feedback object id. target must be <constant>GL_TRANSFORM_FEEDBACK<\/constant>."
            },
            "id": {
                "desc": "Specifies the name of a transform feedback object reserved by glGenTransformFeedbacks."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glTexImage2D": {
        "summary": "specify a two-dimensional texture image",
        "params": {
            "target": {
                "desc": "Specifies the target texture. Must be <constant>GL_TEXTURE_2D<\/constant>, <constant>GL_PROXY_TEXTURE_2D<\/constant>, <constant>GL_TEXTURE_1D_ARRAY<\/constant>, <constant>GL_PROXY_TEXTURE_1D_ARRAY<\/constant>, <constant>GL_TEXTURE_RECTANGLE<\/constant>, <constant>GL_PROXY_TEXTURE_RECTANGLE<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_X<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_X<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_Y<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_Y<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_POSITIVE_Z<\/constant>, <constant>GL_TEXTURE_CUBE_MAP_NEGATIVE_Z<\/constant>, or <constant>GL_PROXY_TEXTURE_CUBE_MAP<\/constant>."
            },
            "level": {
                "desc": "Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is <constant>GL_TEXTURE_RECTANGLE<\/constant> or <constant>GL_PROXY_TEXTURE_RECTANGLE<\/constant>, level must be 0."
            },
            "internalformat": {
                "desc": "Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below."
            },
            "width": {
                "desc": "Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide."
            },
            "height": {
                "desc": "Specifies the height of the texture image, or the number of layers in a texture array, in the case of the <constant>GL_TEXTURE_1D_ARRAY<\/constant> and <constant>GL_PROXY_TEXTURE_1D_ARRAY<\/constant> targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep."
            },
            "border": {
                "desc": "This value must be 0."
            },
            "format": {
                "desc": "Specifies the format of the pixel data. The following symbolic values are accepted: <constant>GL_RED<\/constant>, <constant>GL_RG<\/constant>, <constant>GL_RGB<\/constant>, <constant>GL_BGR<\/constant>, <constant>GL_RGBA<\/constant>, <constant>GL_BGRA<\/constant>, <constant>GL_RED_INTEGER<\/constant>, <constant>GL_RG_INTEGER<\/constant>, <constant>GL_RGB_INTEGER<\/constant>, <constant>GL_BGR_INTEGER<\/constant>, <constant>GL_RGBA_INTEGER<\/constant>, <constant>GL_BGRA_INTEGER<\/constant>, <constant>GL_STENCIL_INDEX<\/constant>, <constant>GL_DEPTH_COMPONENT<\/constant>, <constant>GL_DEPTH_STENCIL<\/constant>."
            },
            "type": {
                "desc": "Specifies the data type of the pixel data. The following symbolic values are accepted: <constant>GL_UNSIGNED_BYTE<\/constant>, <constant>GL_BYTE<\/constant>, <constant>GL_UNSIGNED_SHORT<\/constant>, <constant>GL_SHORT<\/constant>, <constant>GL_UNSIGNED_INT<\/constant>, <constant>GL_INT<\/constant>, <constant>GL_HALF_FLOAT<\/constant>, <constant>GL_FLOAT<\/constant>, <constant>GL_UNSIGNED_BYTE_3_3_2<\/constant>, <constant>GL_UNSIGNED_BYTE_2_3_3_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_5_6_5<\/constant>, <constant>GL_UNSIGNED_SHORT_5_6_5_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_4_4_4_4<\/constant>, <constant>GL_UNSIGNED_SHORT_4_4_4_4_REV<\/constant>, <constant>GL_UNSIGNED_SHORT_5_5_5_1<\/constant>, <constant>GL_UNSIGNED_SHORT_1_5_5_5_REV<\/constant>, <constant>GL_UNSIGNED_INT_8_8_8_8<\/constant>, <constant>GL_UNSIGNED_INT_8_8_8_8_REV<\/constant>, <constant>GL_UNSIGNED_INT_10_10_10_2<\/constant>, and <constant>GL_UNSIGNED_INT_2_10_10_10_REV<\/constant>."
            },
            "data": {
                "desc": "Specifies a pointer to the image data in memory."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2011-2014 Khronos Group.\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glCompressedTexImage3D": {
        "summary": "specify a three-dimensional texture image in a compressed format",
        "params": {
            "target": {
                "desc": "Specifies the target texture. Must be <constant>GL_TEXTURE_3D<\/constant>, <constant>GL_PROXY_TEXTURE_3D<\/constant>, <constant>GL_TEXTURE_2D_ARRAY<\/constant> or <constant>GL_PROXY_TEXTURE_2D_ARRAY<\/constant>."
            },
            "level": {
                "desc": "Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image."
            },
            "internalformat": {
                "desc": "Specifies the format of the compressed image data stored at address data."
            },
            "width": {
                "desc": "Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide."
            },
            "height": {
                "desc": "Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high."
            },
            "depth": {
                "desc": "Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep."
            },
            "border": {
                "desc": "This value must be 0."
            },
            "imageSize": {
                "desc": "Specifies the number of unsigned bytes of image data starting at the address specified by data."
            },
            "data": {
                "desc": "Specifies a pointer to the compressed image data in memory."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2011-2014 Khronos Group.\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "gl_FragCoord": {
        "summary": "contains the window-relative coordinates of the current fragment",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glInvalidateBufferData": {
        "summary": "invalidate the content of a buffer object's data store",
        "params": {
            "buffer": {
                "desc": "The name of a buffer object whose data store to invalidate."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glLineWidth": {
        "summary": "specify the width of rasterized lines",
        "params": {
            "width": {
                "desc": "Specifies the width of rasterized lines. The initial value is 1."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glDrawArraysInstanced": {
        "summary": "draw multiple instances of a range of elements",
        "params": {
            "mode": {
                "desc": "Specifies what kind of primitives to render. Symbolic constants <constant>GL_POINTS<\/constant>, <constant>GL_LINE_STRIP<\/constant>, <constant>GL_LINE_LOOP<\/constant>, <constant>GL_LINES<\/constant>, <constant>GL_TRIANGLE_STRIP<\/constant>, <constant>GL_TRIANGLE_FAN<\/constant>, <constant>GL_TRIANGLES<\/constant> <constant>GL_LINES_ADJACENCY<\/constant>, <constant>GL_LINE_STRIP_ADJACENCY<\/constant>, <constant>GL_TRIANGLES_ADJACENCY<\/constant>, <constant>GL_TRIANGLE_STRIP_ADJACENCY<\/constant> and <constant>GL_PATCHES<\/constant> are accepted."
            },
            "first": {
                "desc": "Specifies the starting index in the enabled arrays."
            },
            "count": {
                "desc": "Specifies the number of indices to be rendered."
            },
            "instancecount": {
                "desc": "Specifies the number of instances of the specified range of indices to be rendered."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDrawElementsIndirect": {
        "summary": "render indexed primitives from array data, taking parameters from memory",
        "params": {
            "mode": {
                "desc": "Specifies what kind of primitives to render. Symbolic constants <constant>GL_POINTS<\/constant>, <constant>GL_LINE_STRIP<\/constant>, <constant>GL_LINE_LOOP<\/constant>, <constant>GL_LINES<\/constant>, <constant>GL_LINE_STRIP_ADJACENCY<\/constant>, <constant>GL_LINES_ADJACENCY<\/constant>, <constant>GL_TRIANGLE_STRIP<\/constant>, <constant>GL_TRIANGLE_FAN<\/constant>, <constant>GL_TRIANGLES<\/constant>, <constant>GL_TRIANGLE_STRIP_ADJACENCY<\/constant>, <constant>GL_TRIANGLES_ADJACENCY<\/constant>, and <constant>GL_PATCHES<\/constant> are accepted."
            },
            "type": {
                "desc": "Specifies the type of data in the buffer bound to the <constant>GL_ELEMENT_ARRAY_BUFFER<\/constant> binding."
            },
            "indirect": {
                "desc": "Specifies the address of a structure containing the draw parameters."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glLinkProgram": {
        "summary": "Links a program object",
        "params": {
            "program": {
                "desc": "Specifies the handle of the program object to be linked."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glTransformFeedbackBufferBase": {
        "summary": "bind a buffer object to a transform feedback buffer object",
        "params": {
            "xfb": {
                "desc": "Name of the transform feedback buffer object."
            },
            "index": {
                "desc": "Index of the binding point within xfb."
            },
            "buffer": {
                "desc": "Name of the buffer object to bind to the specified binding point."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glValidateProgram": {
        "summary": "Validates a program object",
        "params": {
            "program": {
                "desc": "Specifies the handle of the program object to be validated."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetShaderInfoLog": {
        "summary": "Returns the information log for a shader object",
        "params": {
            "shader": {
                "desc": "Specifies the shader object whose information log is to be queried."
            },
            "maxLength": {
                "desc": "Specifies the size of the character buffer for storing the returned information log."
            },
            "length": {
                "desc": "Returns the length of the string returned in infoLog (excluding the null terminator)."
            },
            "infoLog": {
                "desc": "Specifies an array of characters that is used to return the information log."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glEnableVertexAttribArray": {
        "summary": "Enable or disable a generic vertex attribute\n    array",
        "params": {
            "vaobj": {
                "desc": "Specifies the name of the vertex array object for glDisableVertexArrayAttrib and glEnableVertexArrayAttrib functions."
            },
            "index": {
                "desc": "Specifies the index of the generic vertex attribute to be enabled or disabled."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glIsProgram": {
        "summary": "Determines if a name corresponds to a program object",
        "params": {
            "program": {
                "desc": "Specifies a potential program object."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glWaitSync": {
        "summary": "instruct the GL server to block until the specified sync object becomes signaled",
        "params": {
            "sync": {
                "desc": "Specifies the sync object whose status to wait on."
            },
            "flags": {
                "desc": "A bitfield controlling the command flushing behavior. flags may be zero."
            },
            "timeout": {
                "desc": "Specifies the timeout that the server should wait before continuing. timeout must be <constant>GL_TIMEOUT_IGNORED<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glVertexAttribDivisor": {
        "summary": "modify the rate at which generic vertex attributes advance during instanced rendering",
        "params": {
            "index": {
                "desc": "Specify the index of the generic vertex attribute."
            },
            "divisor": {
                "desc": "Specify the number of instances that will pass between updates of the generic attribute at slot index."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetQueryIndexediv": {
        "summary": "return parameters of an indexed query object target",
        "params": {
            "target": {
                "desc": "Specifies a query object target. Must be <constant>GL_SAMPLES_PASSED<\/constant>, <constant>GL_ANY_SAMPLES_PASSED<\/constant>, <constant>GL_ANY_SAMPLES_PASSED_CONSERVATIVE<\/constant> <constant>GL_PRIMITIVES_GENERATED<\/constant>, <constant>GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN<\/constant>, <constant>GL_TIME_ELAPSED<\/constant>, or <constant>GL_TIMESTAMP<\/constant>."
            },
            "index": {
                "desc": "Specifies the index of the query object target."
            },
            "pname": {
                "desc": "Specifies the symbolic name of a query object target parameter. Accepted values are <constant>GL_CURRENT_QUERY<\/constant> or <constant>GL_QUERY_COUNTER_BITS<\/constant>."
            },
            "params": {
                "desc": "Returns the requested data."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDrawTransformFeedbackStreamInstanced": {
        "summary": "render multiple instances of primitives using a count derived from a specifed stream of a transform feedback object",
        "params": {
            "mode": {
                "desc": "Specifies what kind of primitives to render. Symbolic constants <constant>GL_POINTS<\/constant>, <constant>GL_LINE_STRIP<\/constant>, <constant>GL_LINE_LOOP<\/constant>, <constant>GL_LINES<\/constant>, <constant>GL_LINE_STRIP_ADJACENCY<\/constant>, <constant>GL_LINES_ADJACENCY<\/constant>, <constant>GL_TRIANGLE_STRIP<\/constant>, <constant>GL_TRIANGLE_FAN<\/constant>, <constant>GL_TRIANGLES<\/constant>, <constant>GL_TRIANGLE_STRIP_ADJACENCY<\/constant>, <constant>GL_TRIANGLES_ADJACENCY<\/constant>, and <constant>GL_PATCHES<\/constant> are accepted."
            },
            "id": {
                "desc": "Specifies the name of a transform feedback object from which to retrieve a primitive count."
            },
            "stream": {
                "desc": "Specifies the index of the transform feedback stream from which to retrieve a primitive count."
            },
            "instancecount": {
                "desc": "Specifies the number of instances of the geometry to render."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glStencilFunc": {
        "summary": "set front and back function and reference value for stencil testing",
        "params": {
            "func": {
                "desc": "Specifies the test function. Eight symbolic constants are valid: <constant>GL_NEVER<\/constant>, <constant>GL_LESS<\/constant>, <constant>GL_LEQUAL<\/constant>, <constant>GL_GREATER<\/constant>, <constant>GL_GEQUAL<\/constant>, <constant>GL_EQUAL<\/constant>, <constant>GL_NOTEQUAL<\/constant>, and <constant>GL_ALWAYS<\/constant>. The initial value is <constant>GL_ALWAYS<\/constant>."
            },
            "ref": {
                "desc": "Specifies the reference value for the stencil test. ref is clamped to the range    0  2 n  - 1   , where n is the number of bitplanes in the stencil buffer. The initial value is 0."
            },
            "mask": {
                "desc": "Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glMapBuffer": {
        "summary": "map all of a buffer object's data store into the client's address space",
        "params": {
            "target": {
                "desc": "Specifies the target to which the buffer object is bound for glMapBuffer, which must be one of the buffer binding targets in the following table:"
            },
            "buffer": {
                "desc": "Specifies the name of the buffer object for glMapNamedBuffer."
            },
            "access": {
                "desc": "Specifies the access policy for glMapBuffer and glMapNamedBuffer, indicating whether it will be possible to read from, write to, or both read from and write to the buffer object's mapped data store. The symbolic constant must be <constant>GL_READ_ONLY<\/constant>, <constant>GL_WRITE_ONLY<\/constant>, or <constant>GL_READ_WRITE<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2005 Addison-Wesley.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetProgramInterface": {
        "summary": "query a property of an interface in a program",
        "params": {
            "program": {
                "desc": "The name of a program object whose interface to query."
            },
            "programInterface": {
                "desc": "A token identifying the interface within program to query."
            },
            "pname": {
                "desc": "The name of the parameter within programInterface to query."
            },
            "params": {
                "desc": "The address of a variable to retrieve the value of pname for the program interface."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetUniformIndices": {
        "summary": "retrieve the index of a named uniform block",
        "params": {
            "program": {
                "desc": "Specifies the name of a program containing uniforms whose indices to query."
            },
            "uniformCount": {
                "desc": "Specifies the number of uniforms whose indices to query."
            },
            "uniformNames": {
                "desc": "Specifies the address of an array of pointers to buffers containing the names of the queried uniforms."
            },
            "uniformIndices": {
                "desc": "Specifies the address of an array that will receive the indices of the uniforms."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDepthRangeArray": {
        "summary": "specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports",
        "params": {
            "first": {
                "desc": "Specifies the index of the first viewport whose depth range to update."
            },
            "count": {
                "desc": "Specifies the number of viewports whose depth range to update."
            },
            "v": {
                "desc": "Specifies the address of an array containing the near and far values for the depth range of each modified viewport."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDrawTransformFeedback": {
        "summary": "render primitives using a count derived from a transform feedback object",
        "params": {
            "mode": {
                "desc": "Specifies what kind of primitives to render. Symbolic constants <constant>GL_POINTS<\/constant>, <constant>GL_LINE_STRIP<\/constant>, <constant>GL_LINE_LOOP<\/constant>, <constant>GL_LINES<\/constant>, <constant>GL_LINE_STRIP_ADJACENCY<\/constant>, <constant>GL_LINES_ADJACENCY<\/constant>, <constant>GL_TRIANGLE_STRIP<\/constant>, <constant>GL_TRIANGLE_FAN<\/constant>, <constant>GL_TRIANGLES<\/constant>, <constant>GL_TRIANGLE_STRIP_ADJACENCY<\/constant>, <constant>GL_TRIANGLES_ADJACENCY<\/constant>, and <constant>GL_PATCHES<\/constant> are accepted."
            },
            "id": {
                "desc": "Specifies the name of a transform feedback object from which to retrieve a primitive count."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBlendEquation": {
        "summary": "specify the equation used for both the RGB blend equation and the Alpha blend equation",
        "params": {
            "buf": {
                "desc": "for glBlendEquationi, specifies the index of the draw buffer for which to set the blend equation."
            },
            "mode": {
                "desc": "specifies how source and destination colors are combined. It must be <constant>GL_FUNC_ADD<\/constant>, <constant>GL_FUNC_SUBTRACT<\/constant>, <constant>GL_FUNC_REVERSE_SUBTRACT<\/constant>, <constant>GL_MIN<\/constant>, <constant>GL_MAX<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glClearColor": {
        "summary": "specify clear values for the color buffers",
        "params": {
            "red": {
                "desc": "Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glGetBufferPointerv": {
        "summary": "return the pointer to a mapped buffer object's data store",
        "params": {
            "target": {
                "desc": "Specifies the target to which the buffer object is bound for glGetBufferPointerv, which must be one of the buffer binding targets in the following table:"
            },
            "buffer": {
                "desc": "Specifies the name of the buffer object for glGetNamedBufferPointerv."
            },
            "pname": {
                "desc": "Specifies the name of the pointer to be returned. Must be <constant>GL_BUFFER_MAP_POINTER<\/constant>."
            },
            "params": {
                "desc": "Returns the pointer value specified by pname."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2005 Addison-Wesley.\n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glReadBuffer": {
        "summary": "select a color buffer source for pixels",
        "params": {
            "framebuffer": {
                "desc": "Specifies the name of the framebuffer object for glNamedFramebufferReadBuffer function."
            },
            "mode": {
                "desc": "Specifies a color buffer. Accepted values are <constant>GL_FRONT_LEFT<\/constant>, <constant>GL_FRONT_RIGHT<\/constant>, <constant>GL_BACK_LEFT<\/constant>, <constant>GL_BACK_RIGHT<\/constant>, <constant>GL_FRONT<\/constant>, <constant>GL_BACK<\/constant>, <constant>GL_LEFT<\/constant>, <constant>GL_RIGHT<\/constant>, and the constants <constant>GL_COLOR_ATTACHMENT<\/constant>i."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2011-2014 Khronos Group.\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glBindTextures": {
        "summary": "bind one or more named textures to a sequence of consecutive texture units",
        "params": {
            "first": {
                "desc": "Specifies the first texture unit to which a texture is to be bound."
            },
            "count": {
                "desc": "Specifies the number of textures to bind."
            },
            "textures": {
                "desc": "Specifies the address of an array of names of existing texture objects."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBeginConditionalRender": {
        "summary": "start conditional rendering",
        "params": {
            "id": {
                "desc": "Specifies the name of an occlusion query object whose results are used to determine if the rendering commands are discarded."
            },
            "mode": {
                "desc": "Specifies how glBeginConditionalRender interprets the results of the occlusion query."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBindImageTextures": {
        "summary": "bind one or more named texture images to a sequence of consecutive image units",
        "params": {
            "first": {
                "desc": "Specifies the first image unit to which a texture is to be bound."
            },
            "count": {
                "desc": "Specifies the number of textures to bind."
            },
            "textures": {
                "desc": "Specifies the address of an array of names of existing texture objects."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glMultiDrawArraysIndirect": {
        "summary": "render multiple sets of primitives from array data, taking parameters from memory",
        "params": {
            "mode": {
                "desc": "Specifies what kind of primitives to render. Symbolic constants <constant>GL_POINTS<\/constant>, <constant>GL_LINE_STRIP<\/constant>, <constant>GL_LINE_LOOP<\/constant>, <constant>GL_LINES<\/constant>, <constant>GL_LINE_STRIP_ADJACENCY<\/constant>, <constant>GL_LINES_ADJACENCY<\/constant>, <constant>GL_TRIANGLE_STRIP<\/constant>, <constant>GL_TRIANGLE_FAN<\/constant>, <constant>GL_TRIANGLES<\/constant>, <constant>GL_TRIANGLE_STRIP_ADJACENCY<\/constant>, <constant>GL_TRIANGLES_ADJACENCY<\/constant>, and <constant>GL_PATCHES<\/constant> are accepted."
            },
            "indirect": {
                "desc": "Specifies the address of an array of structures containing the draw parameters."
            },
            "drawcount": {
                "desc": "Specifies the number of elements in the array of draw parameter structures."
            },
            "stride": {
                "desc": "Specifies the distance in basic machine units between elements of the draw parameter array."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2012-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBindFramebuffer": {
        "summary": "bind a framebuffer to a framebuffer target",
        "params": {
            "target": {
                "desc": "Specifies the framebuffer target of the binding operation."
            },
            "framebuffer": {
                "desc": "Specifies the name of the framebuffer object to bind."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "gl_InvocationID": {
        "summary": "contains the invocation index of the current shader",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glMultiDrawArrays": {
        "summary": "render multiple sets of primitives from array data",
        "params": {
            "mode": {
                "desc": "Specifies what kind of primitives to render. Symbolic constants <constant>GL_POINTS<\/constant>, <constant>GL_LINE_STRIP<\/constant>, <constant>GL_LINE_LOOP<\/constant>, <constant>GL_LINES<\/constant>, <constant>GL_LINE_STRIP_ADJACENCY<\/constant>, <constant>GL_LINES_ADJACENCY<\/constant>, <constant>GL_TRIANGLE_STRIP<\/constant>, <constant>GL_TRIANGLE_FAN<\/constant>, <constant>GL_TRIANGLES<\/constant>, <constant>GL_TRIANGLE_STRIP_ADJACENCY<\/constant>, <constant>GL_TRIANGLES_ADJACENCY<\/constant> and <constant>GL_PATCHES<\/constant> are accepted."
            },
            "first": {
                "desc": "Points to an array of starting indices in the enabled arrays."
            },
            "count": {
                "desc": "Points to an array of the number of indices to be rendered."
            },
            "drawcount": {
                "desc": "Specifies the size of the first and count"
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006\n            Silicon Graphics, Inc.\n            Copyright  2010-2014\n            Khronos Group.\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glUniformSubroutines": {
        "summary": "load active subroutine uniforms",
        "params": {
            "shadertype": {
                "desc": "Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of <constant>GL_VERTEX_SHADER<\/constant>, <constant>GL_TESS_CONTROL_SHADER<\/constant>, <constant>GL_TESS_EVALUATION_SHADER<\/constant>, <constant>GL_GEOMETRY_SHADER<\/constant> or <constant>GL_FRAGMENT_SHADER<\/constant>."
            },
            "count": {
                "desc": "Specifies the number of uniform indices stored in indices."
            },
            "indices": {
                "desc": "Specifies the address of an array holding the indices to load into the shader subroutine variables."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDrawRangeElements": {
        "summary": "render primitives from array data",
        "params": {
            "mode": {
                "desc": "Specifies what kind of primitives to render. Symbolic constants <constant>GL_POINTS<\/constant>, <constant>GL_LINE_STRIP<\/constant>, <constant>GL_LINE_LOOP<\/constant>, <constant>GL_LINES<\/constant>, <constant>GL_LINE_STRIP_ADJACENCY<\/constant>, <constant>GL_LINES_ADJACENCY<\/constant>, <constant>GL_TRIANGLE_STRIP<\/constant>, <constant>GL_TRIANGLE_FAN<\/constant>, <constant>GL_TRIANGLES<\/constant>, <constant>GL_TRIANGLE_STRIP_ADJACENCY<\/constant>, <constant>GL_TRIANGLES_ADJACENCY<\/constant> and <constant>GL_PATCHES<\/constant> are accepted."
            },
            "start": {
                "desc": "Specifies the minimum array index contained in indices."
            },
            "end": {
                "desc": "Specifies the maximum array index contained in indices."
            },
            "count": {
                "desc": "Specifies the number of elements to be rendered."
            },
            "type": {
                "desc": "Specifies the type of the values in indices. Must be one of <constant>GL_UNSIGNED_BYTE<\/constant>, <constant>GL_UNSIGNED_SHORT<\/constant>, or <constant>GL_UNSIGNED_INT<\/constant>."
            },
            "indices": {
                "desc": "Specifies a pointer to the location where the indices are stored."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glAttachShader": {
        "summary": "Attaches a shader object to a program object",
        "params": {
            "program": {
                "desc": "Specifies the program object to which a shader object will be attached."
            },
            "shader": {
                "desc": "Specifies the shader object that is to be attached."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDeleteProgramPipelines": {
        "summary": "delete program pipeline objects",
        "params": {
            "n": {
                "desc": "Specifies the number of program pipeline objects to delete."
            },
            "pipelines": {
                "desc": "Specifies an array of names of program pipeline objects to delete."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glClearBufferData": {
        "summary": "fill a buffer object's data store with a fixed value",
        "params": {
            "target": {
                "desc": "Specifies the target to which the buffer object is bound for glClearBufferData, which must be one of the buffer binding targets in the following table:"
            },
            "buffer": {
                "desc": "Specifies the name of the buffer object for glClearNamedBufferData."
            },
            "internalformat": {
                "desc": "The internal format with which the data will be stored in the buffer object."
            },
            "format": {
                "desc": "The format of the data in memory addressed by data."
            },
            "type": {
                "desc": "The type of the data in memory addressed by data."
            },
            "data": {
                "desc": "The address of a memory location storing the data to be replicated into the buffer's data store."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glTexStorage1D": {
        "summary": "simultaneously specify storage for all levels of a one-dimensional texture",
        "params": {
            "target": {
                "desc": "Specifies the target to which the texture object is bound for glTexStorage1D. Must be one of <constant>GL_TEXTURE_1D<\/constant> or <constant>GL_PROXY_TEXTURE_1D<\/constant>."
            },
            "texture": {
                "desc": "Specifies the texture object name for glTextureStorage1D. The effective target of texture must be one of the valid non-proxy target values above."
            },
            "levels": {
                "desc": "Specify the number of texture levels."
            },
            "internalformat": {
                "desc": "Specifies the sized internal format to be used to store texture image data."
            },
            "width": {
                "desc": "Specifies the width of the texture, in texels."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "gl_ClipDistance": {
        "summary": "provides a forward-compatible mechanism for vertex clipping",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "gl_NumSamples": {
        "summary": "contains the total number of samples in the framebuffer",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetObjectLabel": {
        "summary": "retrieve the label of a named object identified within a namespace",
        "params": {
            "identifier": {
                "desc": "The namespace from which the name of the object is allocated."
            },
            "name": {
                "desc": "The name of the object whose label to retrieve."
            },
            "bufSize": {
                "desc": "The length of the buffer whose address is in label."
            },
            "length": {
                "desc": "The address of a variable to receive the length of the object label."
            },
            "label": {
                "desc": "The address of a string that will receive the object label."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glPolygonOffset": {
        "summary": "set the scale and units used to calculate depth values",
        "params": {
            "factor": {
                "desc": "Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is 0."
            },
            "units": {
                "desc": "Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glGetError": {
        "summary": "return error information",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glBindVertexArray": {
        "summary": "bind a vertex array object",
        "params": {
            "array": {
                "desc": "Specifies the name of the vertex array to bind."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "gl_SampleID": {
        "summary": "contains the index of the sample currently being processed",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glInvalidateTexImage": {
        "summary": "invalidate the entirety a texture image",
        "params": {
            "texture": {
                "desc": "The name of a texture object to invalidate."
            },
            "level": {
                "desc": "The level of detail of the texture object to invalidate."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glVertexAttribBinding": {
        "summary": "associate a vertex attribute and a vertex buffer binding for a vertex array object",
        "params": {
            "vaobj": {
                "desc": "Specifies the name of the vertex array object for glVertexArrayAttribBinding."
            },
            "attribindex": {
                "desc": "The index of the attribute to associate with a vertex buffer binding."
            },
            "bindingindex": {
                "desc": "The index of the vertex buffer binding with which to associate the generic vertex attribute."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetActiveSubroutineUniform": {
        "summary": "query a property of an active shader subroutine uniform",
        "params": {
            "program": {
                "desc": "Specifies the name of the program containing the subroutine."
            },
            "shadertype": {
                "desc": "Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of <constant>GL_VERTEX_SHADER<\/constant>, <constant>GL_TESS_CONTROL_SHADER<\/constant>, <constant>GL_TESS_EVALUATION_SHADER<\/constant>, <constant>GL_GEOMETRY_SHADER<\/constant> or <constant>GL_FRAGMENT_SHADER<\/constant>."
            },
            "index": {
                "desc": "Specifies the index of the shader subroutine uniform."
            },
            "pname": {
                "desc": "Specifies the parameter of the shader subroutine uniform to query. pname must be <constant>GL_NUM_COMPATIBLE_SUBROUTINES<\/constant>, <constant>GL_COMPATIBLE_SUBROUTINES<\/constant>, <constant>GL_UNIFORM_SIZE<\/constant> or <constant>GL_UNIFORM_NAME_LENGTH<\/constant>."
            },
            "values": {
                "desc": "Specifies the address of a into which the queried value or values will be placed."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBlendColor": {
        "summary": "set the blend color",
        "params": {
            "red": {
                "desc": "specify the components of <constant>GL_BLEND_COLOR<\/constant>"
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "gl_FragDepth": {
        "summary": "establishes a depth value for the current fragment",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glClearBufferSubData": {
        "summary": "fill all or part of buffer object's data store with a fixed value",
        "params": {
            "target": {
                "desc": "Specifies the target to which the buffer object is bound for glClearBufferSubData, which must be one of the buffer binding targets in the following table:"
            },
            "buffer": {
                "desc": "Specifies the name of the buffer object for glClearNamedBufferSubData."
            },
            "internalformat": {
                "desc": "The internal format with which the data will be stored in the buffer object."
            },
            "offset": {
                "desc": "The offset in basic machine units into the buffer object's data store at which to start filling."
            },
            "size": {
                "desc": "The size in basic machine units of the range of the data store to fill."
            },
            "format": {
                "desc": "The format of the data in memory addressed by data."
            },
            "type": {
                "desc": "The type of the data in memory addressed by data."
            },
            "data": {
                "desc": "The address of a memory location storing the data to be replicated into the buffer's data store."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetUniformLocation": {
        "summary": "Returns the location of a uniform variable",
        "params": {
            "program": {
                "desc": "Specifies the program object to be queried."
            },
            "name": {
                "desc": "Points to a null terminated string containing the name of the uniform variable whose location is to be queried."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glFinish": {
        "summary": "block until all GL execution is complete",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glTextureBarrier": {
        "summary": "controls the ordering of reads and writes to rendered fragments across drawing commands",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "gl_LocalInvocationID": {
        "summary": "contains the index of work item currently being operated on by a compute shader",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glStencilOpSeparate": {
        "summary": "set front and\/or back stencil test actions",
        "params": {
            "face": {
                "desc": "Specifies whether front and\/or back stencil state is updated. Three symbolic constants are valid: <constant>GL_FRONT<\/constant>, <constant>GL_BACK<\/constant>, and <constant>GL_FRONT_AND_BACK<\/constant>."
            },
            "sfail": {
                "desc": "Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: <constant>GL_KEEP<\/constant>, <constant>GL_ZERO<\/constant>, <constant>GL_REPLACE<\/constant>, <constant>GL_INCR<\/constant>, <constant>GL_INCR_WRAP<\/constant>, <constant>GL_DECR<\/constant>, <constant>GL_DECR_WRAP<\/constant>, and <constant>GL_INVERT<\/constant>. The initial value is <constant>GL_KEEP<\/constant>."
            },
            "dpfail": {
                "desc": "Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is <constant>GL_KEEP<\/constant>."
            },
            "dppass": {
                "desc": "Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is <constant>GL_KEEP<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2006 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glTexImage2DMultisample": {
        "summary": "establish the data storage, format, dimensions, and number of samples of a multisample texture's image",
        "params": {
            "target": {
                "desc": "Specifies the target of the operation. target must be <constant>GL_TEXTURE_2D_MULTISAMPLE<\/constant> or <constant>GL_PROXY_TEXTURE_2D_MULTISAMPLE<\/constant>."
            },
            "samples": {
                "desc": "The number of samples in the multisample texture's image."
            },
            "internalformat": {
                "desc": "The internal format to be used to store the multisample texture's image. internalformat must specify a color-renderable, depth-renderable, or stencil-renderable format."
            },
            "width": {
                "desc": "The width of the multisample texture's image, in texels."
            },
            "height": {
                "desc": "The height of the multisample texture's image, in texels."
            },
            "fixedsamplelocations": {
                "desc": "Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetFramebufferParameter": {
        "summary": "query a named parameter of a framebuffer object",
        "params": {
            "target": {
                "desc": "Specifies the target to which the framebuffer object is bound for glGetFramebufferParameteriv."
            },
            "framebuffer": {
                "desc": "Specifies the name of the framebuffer object for glGetNamedFramebufferParameteriv."
            },
            "pname": {
                "desc": "Specifies the parameter of the framebuffer object to query."
            },
            "params": {
                "desc": "Returns the value of parameter pname for the framebuffer object."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDeleteQueries": {
        "summary": "delete named query objects",
        "params": {
            "n": {
                "desc": "Specifies the number of query objects to be deleted."
            },
            "ids": {
                "desc": "Specifies an array of query objects to be deleted."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2005 Addison-Wesley.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "gl_TessCoord": {
        "summary": "contains the coordinate of the vertex within the current patch",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glTexBuffer": {
        "summary": "attach a buffer object's data store to a buffer texture object",
        "params": {
            "target": {
                "desc": "Specifies the target to which the texture is bound for glTexBuffer. Must be <constant>GL_TEXTURE_BUFFER<\/constant>."
            },
            "texture": {
                "desc": "Specifies the texture object name for glTextureBuffer."
            },
            "internalformat": {
                "desc": "Specifies the internal format of the data in the store belonging to buffer."
            },
            "buffer": {
                "desc": "Specifies the name of the buffer object whose storage to attach to the active buffer texture."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glCreateQueries": {
        "summary": "create query objects",
        "params": {
            "target": {
                "desc": "Specifies the target of each created query object."
            },
            "n": {
                "desc": "Number of query objects to create."
            },
            "ids": {
                "desc": "Specifies an array in which names of the new query objects are stored."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glPolygonMode": {
        "summary": "select a polygon rasterization mode",
        "params": {
            "face": {
                "desc": "Specifies the polygons that mode applies to. Must be <constant>GL_FRONT_AND_BACK<\/constant> for front- and back-facing polygons."
            },
            "mode": {
                "desc": "Specifies how polygons will be rasterized. Accepted values are <constant>GL_POINT<\/constant>, <constant>GL_LINE<\/constant>, and <constant>GL_FILL<\/constant>. The initial value is <constant>GL_FILL<\/constant> for both front- and back-facing polygons."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glDrawBuffer": {
        "summary": "specify which color buffers are to be drawn into",
        "params": {
            "framebuffer": {
                "desc": "Specifies the name of the framebuffer object for glNamedFramebufferDrawBuffer function. Must be zero or the name of a framebuffer object."
            },
            "buf": {
                "desc": "For default framebuffer, the argument specifies up to four color buffers to be drawn into. Symbolic constants <constant>GL_NONE<\/constant>, <constant>GL_FRONT_LEFT<\/constant>, <constant>GL_FRONT_RIGHT<\/constant>, <constant>GL_BACK_LEFT<\/constant>, <constant>GL_BACK_RIGHT<\/constant>, <constant>GL_FRONT<\/constant>, <constant>GL_BACK<\/constant>, <constant>GL_LEFT<\/constant>, <constant>GL_RIGHT<\/constant>, and <constant>GL_FRONT_AND_BACK<\/constant> are accepted. The initial value is <constant>GL_FRONT<\/constant> for single-buffered contexts, and <constant>GL_BACK<\/constant> for double-buffered contexts. For framebuffer objects, <constant>GL_COLOR_ATTACHMENT$m$<\/constant> and <constant>GL_NONE<\/constant> enums are accepted, where <constant>$m$<\/constant> is a value between 0 and <constant>GL_MAX_COLOR_ATTACHMENTS<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "gl_ViewportIndex": {
        "summary": "contains the index of the viewport to be used in viewport transformation and scissoring",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glMultiDrawElementsIndirect": {
        "summary": "render indexed primitives from array data, taking parameters from memory",
        "params": {
            "mode": {
                "desc": "Specifies what kind of primitives to render. Symbolic constants <constant>GL_POINTS<\/constant>, <constant>GL_LINE_STRIP<\/constant>, <constant>GL_LINE_LOOP<\/constant>, <constant>GL_LINES<\/constant>, <constant>GL_LINE_STRIP_ADJACENCY<\/constant>, <constant>GL_LINES_ADJACENCY<\/constant>, <constant>GL_TRIANGLE_STRIP<\/constant>, <constant>GL_TRIANGLE_FAN<\/constant>, <constant>GL_TRIANGLES<\/constant>, <constant>GL_TRIANGLE_STRIP_ADJACENCY<\/constant>, <constant>GL_TRIANGLES_ADJACENCY<\/constant>, and <constant>GL_PATCHES<\/constant> are accepted."
            },
            "type": {
                "desc": "Specifies the type of data in the buffer bound to the <constant>GL_ELEMENT_ARRAY_BUFFER<\/constant> binding."
            },
            "indirect": {
                "desc": "Specifies the address of a structure containing an array of draw parameters."
            },
            "drawcount": {
                "desc": "Specifies the number of elements in the array addressed by indirect."
            },
            "stride": {
                "desc": "Specifies the distance in basic machine units between elements of the draw parameter array."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glClipControl": {
        "summary": "control clip coordinate to window coordinate behavior",
        "params": {
            "origin": {
                "desc": "Specifies the clip control origin. Must be one of <constant>GL_LOWER_LEFT<\/constant> or <constant>GL_UPPER_LEFT<\/constant>."
            },
            "depth": {
                "desc": "Specifies the clip control depth mode. Must be one of <constant>GL_NEGATIVE_ONE_TO_ONE<\/constant> or <constant>GL_ZERO_TO_ONE<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetActiveUniformsiv": {
        "summary": "Returns information about several active uniform variables for the specified program object",
        "params": {
            "program": {
                "desc": "Specifies the program object to be queried."
            },
            "uniformCount": {
                "desc": "Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return."
            },
            "uniformIndices": {
                "desc": "Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried."
            },
            "pname": {
                "desc": "Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params."
            },
            "params": {
                "desc": "Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glMultiDrawElements": {
        "summary": "render multiple sets of primitives by specifying indices of array data elements",
        "params": {
            "mode": {
                "desc": "Specifies what kind of primitives to render. Symbolic constants <constant>GL_POINTS<\/constant>, <constant>GL_LINE_STRIP<\/constant>, <constant>GL_LINE_LOOP<\/constant>, <constant>GL_LINES<\/constant>, <constant>GL_LINE_STRIP_ADJACENCY<\/constant>, <constant>GL_LINES_ADJACENCY<\/constant>, <constant>GL_TRIANGLE_STRIP<\/constant>, <constant>GL_TRIANGLE_FAN<\/constant>, <constant>GL_TRIANGLES<\/constant>, <constant>GL_TRIANGLE_STRIP_ADJACENCY<\/constant>, <constant>GL_TRIANGLES_ADJACENCY<\/constant> and <constant>GL_PATCHES<\/constant> are accepted."
            },
            "count": {
                "desc": "Points to an array of the elements counts."
            },
            "type": {
                "desc": "Specifies the type of the values in indices. Must be one of <constant>GL_UNSIGNED_BYTE<\/constant>, <constant>GL_UNSIGNED_SHORT<\/constant>, or <constant>GL_UNSIGNED_INT<\/constant>."
            },
            "indices": {
                "desc": "Specifies a pointer to the location where the indices are stored."
            },
            "drawcount": {
                "desc": "Specifies the size of the count and indices arrays."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006\n            Silicon Graphics, Inc.\n            Copyright  2010-2014\n            Khronos Group.\n            This document is licensed under the SGI\n            Free Software B License. For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glBindAttribLocation": {
        "summary": "Associates a generic vertex attribute index with a named attribute variable",
        "params": {
            "program": {
                "desc": "Specifies the handle of the program object in which the association is to be made."
            },
            "index": {
                "desc": "Specifies the index of the generic vertex attribute to be bound."
            },
            "name": {
                "desc": "Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glStencilMask": {
        "summary": "control the front and back writing of individual bits in the stencil planes",
        "params": {
            "mask": {
                "desc": "Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glDeleteTransformFeedbacks": {
        "summary": "delete transform feedback objects",
        "params": {
            "n": {
                "desc": "Specifies the number of transform feedback objects to delete."
            },
            "ids": {
                "desc": "Specifies an array of names of transform feedback objects to delete."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDrawRangeElementsBaseVertex": {
        "summary": "render primitives from array data with a per-element offset",
        "params": {
            "mode": {
                "desc": "Specifies what kind of primitives to render. Symbolic constants <constant>GL_POINTS<\/constant>, <constant>GL_LINE_STRIP<\/constant>, <constant>GL_LINE_LOOP<\/constant>, <constant>GL_LINES<\/constant>, <constant>GL_TRIANGLE_STRIP<\/constant>, <constant>GL_TRIANGLE_FAN<\/constant>, <constant>GL_TRIANGLES<\/constant>, <constant>GL_LINES_ADJACENCY<\/constant>, <constant>GL_LINE_STRIP_ADJACENCY<\/constant>, <constant>GL_TRIANGLES_ADJACENCY<\/constant>, <constant>GL_TRIANGLE_STRIP_ADJACENCY<\/constant> and <constant>GL_PATCHES<\/constant> are accepted."
            },
            "start": {
                "desc": "Specifies the minimum array index contained in indices."
            },
            "end": {
                "desc": "Specifies the maximum array index contained in indices."
            },
            "count": {
                "desc": "Specifies the number of elements to be rendered."
            },
            "type": {
                "desc": "Specifies the type of the values in indices. Must be one of <constant>GL_UNSIGNED_BYTE<\/constant>, <constant>GL_UNSIGNED_SHORT<\/constant>, or <constant>GL_UNSIGNED_INT<\/constant>."
            },
            "indices": {
                "desc": "Specifies a pointer to the location where the indices are stored."
            },
            "basevertex": {
                "desc": "Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glBufferData": {
        "summary": "creates and initializes a buffer object's data\n    store",
        "params": {
            "target": {
                "desc": "Specifies the target to which the buffer object is bound for glBufferData, which must be one of the buffer binding targets in the following table:"
            },
            "buffer": {
                "desc": "Specifies the name of the buffer object for glNamedBufferData function."
            },
            "size": {
                "desc": "Specifies the size in bytes of the buffer object's new data store."
            },
            "data": {
                "desc": "Specifies a pointer to data that will be copied into the data store for initialization, or <constant>NULL<\/constant> if no data is to be copied."
            },
            "usage": {
                "desc": "Specifies the expected usage pattern of the data store. The symbolic constant must be <constant>GL_STREAM_DRAW<\/constant>, <constant>GL_STREAM_READ<\/constant>, <constant>GL_STREAM_COPY<\/constant>, <constant>GL_STATIC_DRAW<\/constant>, <constant>GL_STATIC_READ<\/constant>, <constant>GL_STATIC_COPY<\/constant>, <constant>GL_DYNAMIC_DRAW<\/constant>, <constant>GL_DYNAMIC_READ<\/constant>, or <constant>GL_DYNAMIC_COPY<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2005 Addison-Wesley.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glCreateProgramPipelines": {
        "summary": "create program pipeline objects",
        "params": {
            "n": {
                "desc": "Number of program pipeline objects to create."
            },
            "pipelines": {
                "desc": "Specifies an array in which names of the new program pipeline objects are stored."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDrawTransformFeedbackStream": {
        "summary": "render primitives using a count derived from a specifed stream of a transform feedback object",
        "params": {
            "mode": {
                "desc": "Specifies what kind of primitives to render. Symbolic constants <constant>GL_POINTS<\/constant>, <constant>GL_LINE_STRIP<\/constant>, <constant>GL_LINE_LOOP<\/constant>, <constant>GL_LINES<\/constant>, <constant>GL_LINE_STRIP_ADJACENCY<\/constant>, <constant>GL_LINES_ADJACENCY<\/constant>, <constant>GL_TRIANGLE_STRIP<\/constant>, <constant>GL_TRIANGLE_FAN<\/constant>, <constant>GL_TRIANGLES<\/constant>, <constant>GL_TRIANGLE_STRIP_ADJACENCY<\/constant>, <constant>GL_TRIANGLES_ADJACENCY<\/constant>, and <constant>GL_PATCHES<\/constant> are accepted."
            },
            "id": {
                "desc": "Specifies the name of a transform feedback object from which to retrieve a primitive count."
            },
            "stream": {
                "desc": "Specifies the index of the transform feedback stream from which to retrieve a primitive count."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetQueryObject": {
        "summary": "return parameters of a query object",
        "params": {
            "id": {
                "desc": "Specifies the name of a query object."
            },
            "buffer": {
                "desc": "Specifies the name of a buffer object."
            },
            "pname": {
                "desc": "Specifies the symbolic name of a query object parameter.  Accepted values are <constant>GL_QUERY_RESULT<\/constant>, <constant>GL_QUERY_RESULT_AVAILABLE<\/constant>, <constant>GL_QUERY_RESULT_NO_WAIT<\/constant>, or <constant>GL_QUERY_TARGET<\/constant>."
            },
            "params": {
                "desc": "If a buffer is bound to the <constant>GL_QUERY_RESULT_BUFFER<\/constant> target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to <constant>GL_QUERY_RESULT_BUFFER<\/constant>, then params is treated as an address in client memory of a variable to receive the resulting data."
            },
            "offset": {
                "desc": "Specifies the byte offset into buffer's data store where the queried result will be written."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2005 Addison-Wesley.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glResumeTransformFeedback": {
        "summary": "resume transform feedback operations",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glCompileShader": {
        "summary": "Compiles a shader object",
        "params": {
            "shader": {
                "desc": "Specifies the shader object to be compiled."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2003-2005 3Dlabs Inc. Ltd.\n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGenerateMipmap": {
        "summary": "generate mipmaps for a specified texture object",
        "params": {
            "target": {
                "desc": "Specifies the target to which the texture object is bound for glGenerateMipmap. Must be one of <constant>GL_TEXTURE_1D<\/constant>, <constant>GL_TEXTURE_2D<\/constant>, <constant>GL_TEXTURE_3D<\/constant>, <constant>GL_TEXTURE_1D_ARRAY<\/constant>, <constant>GL_TEXTURE_2D_ARRAY<\/constant>, <constant>GL_TEXTURE_CUBE_MAP<\/constant>, or <constant>GL_TEXTURE_CUBE_MAP_ARRAY<\/constant>."
            },
            "texture": {
                "desc": "Specifies the texture object name for glGenerateTextureMipmap."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glDrawElementsInstancedBaseVertexBaseInstance": {
        "summary": "render multiple instances of a set of primitives from array data with a per-element offset",
        "params": {
            "mode": {
                "desc": "Specifies what kind of primitives to render. Symbolic constants <constant>GL_POINTS<\/constant>, <constant>GL_LINE_STRIP<\/constant>, <constant>GL_LINE_LOOP<\/constant>, <constant>GL_LINES<\/constant>, <constant>GL_TRIANGLE_STRIP<\/constant>, <constant>GL_TRIANGLE_FAN<\/constant>, <constant>GL_TRIANGLES<\/constant>, <constant>GL_LINES_ADJACENCY<\/constant>, <constant>GL_LINE_STRIP_ADJACENCY<\/constant>, <constant>GL_TRIANGLES_ADJACENCY<\/constant>, <constant>GL_TRIANGLE_STRIP_ADJACENCY<\/constant> and <constant>GL_PATCHES<\/constant> are accepted."
            },
            "count": {
                "desc": "Specifies the number of elements to be rendered."
            },
            "type": {
                "desc": "Specifies the type of the values in indices. Must be one of <constant>GL_UNSIGNED_BYTE<\/constant>, <constant>GL_UNSIGNED_SHORT<\/constant>, or <constant>GL_UNSIGNED_INT<\/constant>."
            },
            "indices": {
                "desc": "Specifies a pointer to the location where the indices are stored."
            },
            "instancecount": {
                "desc": "Specifies the number of instances of the indexed geometry that should be drawn."
            },
            "basevertex": {
                "desc": "Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays."
            },
            "baseinstance": {
                "desc": "Specifies the base instance for use in fetching instanced vertex attributes."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetActiveUniformBlock": {
        "summary": "query information about an active uniform block",
        "params": {
            "program": {
                "desc": "Specifies the name of a program containing the uniform block."
            },
            "uniformBlockIndex": {
                "desc": "Specifies the index of the uniform block within program."
            },
            "pname": {
                "desc": "Specifies the name of the parameter to query."
            },
            "params": {
                "desc": "Specifies the address of a variable to receive the result of the query."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetActiveAtomicCounterBufferiv": {
        "summary": "retrieve information about the set of active atomic counter buffers for a program",
        "params": {
            "program": {
                "desc": "The name of a program object from which to retrieve information."
            },
            "bufferIndex": {
                "desc": "Specifies index of an active atomic counter buffer."
            },
            "pname": {
                "desc": "Specifies which parameter of the atomic counter buffer to retrieve."
            },
            "params": {
                "desc": "Specifies the address of a variable into which to write the retrieved information."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2011-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "gl_CullDistance": {
        "summary": "provides a mechanism for controlling user culling",
        "params": [],
        "copyright": "Copyright\n        \n            Copyright  2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glSampleCoverage": {
        "summary": "specify multisample coverage parameters",
        "params": {
            "value": {
                "desc": "Specify a single floating-point sample coverage value.  The value is clamped to the range    0 1  . The initial value is 1.0."
            },
            "invert": {
                "desc": "Specify a single boolean value representing if the coverage masks should be inverted.  <constant>GL_TRUE<\/constant> and <constant>GL_FALSE<\/constant> are accepted.  The initial value is <constant>GL_FALSE<\/constant>."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  1991-2006 Silicon Graphics, Inc.\n            Copyright  2010-2014 Khronos Group.\n            This document is licensed under the SGI Free Software B License.\n            For details, see\n            https:\/\/khronos.org\/registry\/OpenGL-Refpages\/LICENSES\/LicenseRef-FreeB.txt.\n        \n    "
    },
    "glDrawArraysIndirect": {
        "summary": "render primitives from array data, taking parameters from memory",
        "params": {
            "mode": {
                "desc": "Specifies what kind of primitives to render. Symbolic constants <constant>GL_POINTS<\/constant>, <constant>GL_LINE_STRIP<\/constant>, <constant>GL_LINE_LOOP<\/constant>, <constant>GL_LINES<\/constant>, <constant>GL_LINE_STRIP_ADJACENCY<\/constant>, <constant>GL_LINES_ADJACENCY<\/constant>, <constant>GL_TRIANGLE_STRIP<\/constant>, <constant>GL_TRIANGLE_FAN<\/constant>, <constant>GL_TRIANGLES<\/constant>, <constant>GL_TRIANGLE_STRIP_ADJACENCY<\/constant>, <constant>GL_TRIANGLES_ADJACENCY<\/constant>, and <constant>GL_PATCHES<\/constant> are accepted."
            },
            "indirect": {
                "desc": "Specifies the address of a structure containing the draw parameters."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2010-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    },
    "glGetProgramResource": {
        "summary": "retrieve values for multiple properties of a single active resource within a program object",
        "params": {
            "program": {
                "desc": "The name of a program object whose resources to query."
            },
            "programInterface": {
                "desc": "A token identifying the interface within program containing the resource named name."
            }
        },
        "copyright": "Copyright\n        \n            Copyright  2013-2014 Khronos Group.\n            This material may be distributed subject to the terms and conditions set forth in\n            the Open Publication License, v 1.0, 8 June 1999.\n            https:\/\/opencontent.org\/openpub\/.\n        \n    "
    }
}